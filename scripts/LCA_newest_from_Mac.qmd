---
title: "LCA newest"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

### Libraries

```{r warnings = FALSE}
library(stats)
library(tidyverse)
library(readxl)
library(benford.analysis)
library(patchwork)
library(countrycode)
theme_set(theme(
    plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 13),
    axis.text.x = element_text(size = 6,angle = 90, hjust = 1),
    axis.text.y = element_text(size = 6),
    axis.title.x = element_text(size = 6,margin = margin(t = 8)), # Adjust x-axis title size
    axis.title.y = element_text(size = 6, angle = 90, margin = margin(r = 8)), 
    legend.text = element_text(size = 7),    # Adjust legend text size
    legend.title = element_text(size = 8),   # Adjust legend title size
    legend.position = "bottom",                 # Position the legend at the top
    legend.box = "horizontal",               # Arrange legend items horizontally
    legend.spacing.x = unit(0.2, "cm"),       # Adjust spacing between legend items
    panel.grid = element_blank(),
    panel.background = element_rect(fill = "black"),
    legend.key = element_rect(colour = "black", size = 0.6),
    plot.margin = margin(t = 0,  # Top margin
                             r = 0.3,  # Right margin
                             b = 0,  # Bottom margin
                             l = 0)) # Left margin
  )     


#conformityColors <- c("Close conformity" = "#386641","Acceptable conformity" = "#6a994e","Marginally acceptable conformity" = "#a7c957","Nonconformity" = "#f2e8d0","Not suitable data" = "darkgrey")
# conformityColors <- c("Close conformity" = "#274c77","Acceptable conformity" = "#6096ba","Marginally acceptable conformity" = "#a3cef1","Nonconformity" = "#e7ecef", "Not suitable data" = "#636393")
# 
# conformityColors <- c("Close conformity" = "#ec6342","Acceptable conformity" = "#f79639","Marginally acceptable conformity" = "#f6c543","Nonconformity" = "#f8f4e4", "Not suitable data" = "#636363")
# 
# # Aleksandar's colors
#  conformityColors <- c("Close conformity" = "#75096b","Acceptable conformity" = "#c402b1","Marginally acceptable conformity" = "#fc72de","Nonconformity" = "#f2d9f1", "Not suitable data" = "#333333")
  conformityColors <- c("Close conformity" = "#4478c5","Acceptable conformity" = "#7f9ec5","Marginally acceptable conformity" = "#c5b5df","Nonconformity" = "#fde5e1", "Not suitable data" = "#f9cbe7")
# conformityColors <- c("Close conformity" = "#1E90FF","Acceptable conformity" = "#447ac4","Marginally acceptable conformity" = "#85aadf","Nonconformity" = "#fc72de", "Not suitable data" = "#f9cbe7")
#1E90FF
#black could be error in benford function.
#569CF2" "#8EA8E4" "#C6B3D8" "#FFC0CB"
```

# Brewing colors

```{r}
colors <- c("#1E90FF", "#d01c8b")

# Create a color palette function with colorRampPalette()
color_palette <- colorRampPalette(colors)

# Generate 4 colors within the specified range
my_colors <- color_palette(5)

# Print the colors
print(my_colors)

# Example usage with ggplot2
df <- data.frame(x = 1:4, y = c(2, 3, 5, 4))

ggplot(df, aes(x, y, fill = factor(x))) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = my_colors) +
  theme_minimal()
```

### Functions

```{r}

benford_conforming <- function(data,n = 1) {
  tryCatch({
    if(nrow(data) < 500){
      return("Missing data")
    }
    numeric_columns <- data |> select_if(is.numeric)
    #cols_with_positive_values <- colSums(numeric_columns > 0) > 0
    #numeric_columns <- numeric_columns[,cols_with_positive_values]

    #numeric_columns |> mutate(across(where(is.numeric), ~abs(.))) -> numeric_columns
    #numeric_columns |> select_if(function(x) (max(x) - min(x)) >= 1000) -> numeric_columns
    if(numeric_columns |> length() == 0){
      return("No numerical columns")
    }
    
    numeric_columns |> ncol() -> num_of_numeric_cols
    sapply(numeric_columns, function(x) {if(mean(x) > median(x) & sum(x != 0) > 500){res = benford(x, number.of.digits = n, sign = "both"); 
    res$MAD.conformity}else("Not suitable data")}) -> result
    #result[result != "Nonconformity"] |> length() -> num_of_conforming
    return(result)
    #return(cat("Number of conforming cols", num_of_conforming, "out of", num_of_numeric_cols,"numerical cols\n"))
    }, error = function(e) {
  })
} 

benford_conforming_stats <- function(data,n = 1) {
  tryCatch({
    if(nrow(data) < 500){
      return("Missing data")
    }
    numeric_columns <- data |> select_if(is.numeric)
    #cols_with_positive_values <- colSums(numeric_columns > 0) > 0
    #numeric_columns <- numeric_columns[,cols_with_positive_values]

    #numeric_columns |> mutate(across(where(is.numeric), ~abs(.))) -> numeric_columns
    #numeric_columns |> select_if(function(x) (max(x) - min(x)) >= 1000) -> numeric_columns
    if(numeric_columns |> length() == 0){
      return("No numerical columns")
    }
    
    numeric_columns |> ncol() -> num_of_numeric_cols
    sapply(numeric_columns, function(x) {if(mean(x) > median(x) & sum(x != 0) > 500){res = benford(x, number.of.digits = n, sign = "both"); 
    res}else("Not suitable data")}) -> result
    #result[result != "Nonconformity"] |> length() -> num_of_conforming
    return(result)
    #return(cat("Number of conforming cols", num_of_conforming, "out of", num_of_numeric_cols,"numerical cols\n"))
    }, error = function(e) {
  })
} 

benford_conforming_combined2 <- function(data, n = 1){
  all.numeric.values <- unlist(data[sapply(data, is.numeric)], use.names = FALSE)
  if(sum(all.numeric.values == 0) < 500 | mean(all.numeric.values) < median(all.numeric.values)){
      return("Not suitable data")
    }else{
      return(benford(all.numeric.values, number.of.digits = n, sign = "both"))
    }
}

first_digit <- function(number) {
  number |> as.character() |> str_extract("[1-9]") |> as.numeric() -> result
  ifelse(!is.na(result), result, 0) 
}

benfordPlot <- function(BObject,title,suspectTreshold = NULL) {
  suspectColor <- "#FF10F0"
  nonSuspectColor <- "#1E90FF"
  B_data <-getBfd(BObject)
  if(suspectTreshold |> is.null()){
      ggplot(data = B_data, aes(x = digits, y = data.dist * 100)) +
      theme_bw() +
      scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
      scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) +  # Adjust the 'mult' parameter to control the expansion
      geom_col(color = "black", fill =nonSuspectColor, width = 0.4) +
      labs(title = title) +
      stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1.2, se = FALSE, alpha = 0.8) +
      geom_point(size = 2) +
      theme(plot.title = element_text(size = 12, hjust = 0.5),
      panel.border = element_rect(size = 1),
      legend.position = "none") +
      guides(color = "none")
  }else{
      B_suspects <- getSuspects(BObject, B_data)
      #B_data$suspect <- ifelse(B_data$squared.diff > suspectTreshold, "yes", "no")
      B_data$suspect <- ifelse(abs(B_data$data.dist - B_data$benford.dist) >  suspectTreshold , "yes", "no")
      ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
      theme_bw() +
      scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
      scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) +
      geom_col(color = "black", width = 0.4, show.legend = TRUE) +  # Ensure fill legend is shown
      stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1.3, se = FALSE, alpha = 0.8) +
      geom_point(aes(x = digits, y = data.dist * 100), size = 2, color = "black", show.legend = FALSE) +  # Explicitly disable legend for points
      labs(title = title) +
      scale_fill_manual(values = c(nonSuspectColor, suspectColor)) +
      theme(
        plot.title = element_text(size = 12, hjust = 0.5),
        panel.border = element_rect(size = 1)
      ) +
      guides(color = "none")  # Ensure no color legend is shown
  }
}

benfordPlot(benford_bioenergiedat_18_all,"asd",0.01)
plot(x = B_data$digits, y = B_data$benford.dist*100, type = "l")
```

## Small Carbon Data

```{r warning=FALSE}
# data <- read_excel("Cut-off Cumulative LCI v3.9.1_bogdan.xlsx", sheet = "LCI")
# data |> rename(Country = `Activity Name...3`) -> data
# data$`Carbon dioxide, from soil or biomass stock...15` |> as.numeric() -> data[,15]
# data |> na.omit() -> data
# numeric_columns <- data[,data |> sapply(is.numeric)] 
# numeric_columns |> ncol() -> num_of_numeric_cols
# 
# data |> mutate(across(where(is.numeric), ~abs(.))) 
# sapply(numeric_columns, function(x) {res = benford(x, number.of.digits = 2); res$MAD.conformity}) -> result
# result[result != "Nonconformity"] |> length() -> num_of_conforming
# paste("Number of total numeric cols:",num_of_numeric_cols)
# paste("Number of conforming cols:",num_of_conforming)
# 
# benford_conforming(data) |> table()
# 
# data |> benford_conforming() -> xx
# xx[xx == "Nonconformity"] |> names()
```

```{r}
# data[,xx]
```

```{r}
#test for China

# numeric_columns <- data[data$Country == "CN",data |> sapply(is.numeric)] 
# numeric_columns |> abs() -> abs 
# numeric_columns |> ncol() -> num_of_numeric_cols
# 
# sapply(numeric_columns, function(x) {res = benford(x, number.of.digits = 2); res$MAD.conformity}) -> result
# result[result != "Nonconformity"] |> length() -> num_of_conforming
# paste("Number of total numeric cols:",num_of_numeric_cols)
# paste("Number of conforming cols:",num_of_conforming)

```

```{r warning=FALSE}

# data |> group_by(Country) |> summarise(n = n()) |> arrange(desc(n)) -> rowsPerCountry
# 
# Countries <- unique(data$Country)
# for (country in Countries) {
#   countryData <- data |> dplyr::filter(Country == country)
#     if(countryData |> nrow() > 200){
#       cat(country,": ")
#       countryData |> benford_conforming() -> result
#       result[result != "Nonconformity"] |> length()
#     }
# }

```

## Country data cleaning

```{r}
# read_csv("contry_codes.csv") |> dplyr::filter(Name %in% c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden")) |> pull(Code) -> EUCountries
# 
# data |> mutate(Country = case_when(
#     str_detect(Country, "US-") ~ "US",
#     str_detect(Country, "CA-") ~ "CA",
#     str_detect(Country, "CN-") ~ "CN",
#      str_detect(Country, "BR-") ~ "BR",
#      str_detect(Country, "AU-") ~ "AU",
#      str_detect(Country, "IN-") ~ "IN",
#       Country %in% EUCountries ~ "EU",
#     TRUE ~ as.character(Country)
#   )) -> carbonDataCountriesGrouped
# 
# 
# carbonDataCountriesGrouped |> group_by(Country) |> summarise(n = n()) |> arrange(desc(n))
```

### Importing big dataset

```{r}
bigData <- read.csv("Cut-off Cumulative LCI v3.10.csv")

#bigData |> mutate_if(is.numeric, first_digit) -> bigDataFirstDigit
```

```{r}
read_xlsx("headerLCI.xlsx", sheet = 2, skip=2) -> header
header[1,] |> as.vector() -> headerNames
colnames(bigData)[1:5] -> temp
temp[2] <- "Activity Name"
temp[3] <- "Country"
temp |> str_replace_all(" ",".") -> temp
headerNames <- c(temp,headerNames)
#headerNames[-seq(1,5)] -> headerNames
colnames(bigData) <- headerNames
#colnames(bigDataFirstDigit) <- headerNames
bigData |> select(-"Exchange Name|Compartment|Subcompartment") -> bigData
#bigDataFirstDigit |> select(-"Exchange Name|Compartment|Subcompartment") -> bigDataFirstDigit
head(bigData)
#head(bigDataFirstDigit)
```

```{r warning=FALSE}
#bigData |> benford_conforming() 

```

```{r warning=FALSE}
bigData |> group_by(Country) |> summarise(n = n()) |> arrange(desc(n)) -> rowsPerCountryBigData
rowsPerCountryBigData
# CountriesBigData <- unique(bigData$Country)
# counter <- 0
# for (country in CountriesBigData) {
#   countryData <- bigData |> dplyr::filter(Country == country)
#   if(countryData |> nrow() > 200){
#     counter <- counter + 1
#     cat(country,": ")
#     countryData |> benford_conforming()
#   }
# }


```

```{r warning=F}
# numeric_columns <- bigData[,bigData |> sapply(is.numeric)] 
# cols_with_positive_values <- colSums(numeric_columns > 0) > 0
# numeric_columns <- numeric_columns[,cols_with_positive_values]
# numeric_columns |> select_if(function(x) (max(x) - min(x)) >= 1000) 


```

```{r}
# bigData |> group_by(Reference.Product.Unit) |> summarise(n = n()) |> arrange(desc(n)) -> rowsPerUnitBigData
# 
# UnitsBigData <- unique(bigData$Reference.Product.Unit)
# counter <- 0
# for (unit in UnitsBigData) {
#   unitData <- bigData |> dplyr::filter(Reference.Product.Unit == unit)
#   if(unitData |> nrow() > 200){
#     counter <- counter + 1
#     cat(unit,": ")
#     unitData |> benford_conforming() -> result
#     result[result != "Nonconformity"] |> length()
#   }
# }

```

### Grouping countries in big dataset

```{r}
read_csv("contry_codes.csv") |> dplyr::filter(Name %in% c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden")) |> pull(Code) -> EUCountries

bigData |> select(Country) |> dplyr::filter(str_detect(Country,"-")) |> unique() -> countriesToGroup

bigData |> mutate(Country = case_when(
    str_detect(Country, "US-") ~ "US",
    str_detect(Country, "CA-") ~ "CA",
    str_detect(Country, "CN-") ~ "CN",
     str_detect(Country, "BR-") ~ "BR",
     str_detect(Country, "AU-") ~ "AU",
     str_detect(Country, "IN-") ~ "IN",
      Country %in% EUCountries ~ "EU",
    TRUE ~ as.character(Country)
  )) -> bigDataCountriesGrouped


bigData |> group_by(Country) |> summarise(n = n()) |> arrange(desc(n)) -> rowsPerCountry
bigDataCountriesGrouped |> group_by(Country) |> summarise(n = n()) |> arrange(desc(n)) -> rowsPerCountryGrouped
rowsPerCountryGrouped

# bigDataFirstDigit |> mutate(Country = case_when(
#     str_detect(Country, "US-") ~ "US",
#     str_detect(Country, "CA-") ~ "CA",
#     str_detect(Country, "CN-") ~ "CN",
#      str_detect(Country, "BR-") ~ "BR",
#      str_detect(Country, "AU-") ~ "AU",
#      str_detect(Country, "IN-") ~ "IN",
#       Country %in% EUCountries ~ "EU",
#     TRUE ~ as.character(Country)
#   )) -> bigDataFirstDigit
# 


```

# Finding all columns that conform to Benford's law

```{r}
bigData |> benford_conforming() -> conforming_cols

conforming_cols |> length()

conforming_cols[conforming_cols == "Close conformity"] |> names() -> close_conforming_cols

close_conforming_cols |> length()

conforming_cols[conforming_cols == "Acceptable conformity"] |> names() -> acceptable_conformity_cols

acceptable_conformity_cols |> length()

conforming_cols[conforming_cols == "Marginally acceptable conformity"] |> names() -> marginally_acceptable_cols

marginally_acceptable_cols |> length()
```

```{r}
#find minimum distorsion factor from MAD conformity from close conforming cols

bigData |> select("Silver I|water|ocean") |> pull() |> benford() -> yy
yy$MAD

min_mad <- Inf
min_mad_col <- ""
for (col in close_conforming_cols) {
  mad <- benford(bigData[[col]], number.of.digits = 1, sign = "both")$MAD
  if(mad < min_mad){
    min_mad <- mad
    min_mad_col <- col
  }
}

bigData |> select(min_mad_col) |> pull() |> benford(1) |> plot()
```

# Testing benford sample size with ecoinvent columns

```{r}
sample_f <- function(x, n) {
  benford_vector <- sample(x, n) |> benford(1)
  return(benford_vector$MAD.conformity)
}
```


```{r}
#close confrming columns
bigData |> select(min_mad_col) |> pull() -> perfect.benford.numbers.bigData
bigData |> select(close_conforming_cols[1]) |> pull() -> close.conf.numbers.bigData
sample.df.bigData <- data.frame()

  for (i in seq(50,1000,50)) {
    replicate(1000, sample_f(perfect.benford.numbers.bigData, i)) -> vector
    data.frame(sample.size = i, percentage.of.conforming = vector[vector != "Nonconformity"] |> length() / length(vector) * 100) -> df
    sample.df.bigData <- rbind(sample.df.bigData, df)
  }

ggplot(sample.df.bigData, aes(x = sample.size, y = percentage.of.conforming)) + 
  geom_col(fill = "#1E90FF", color = "black") +
  labs(x = "Sample Size", y = "Percentage of Conforming", 
       title = "Conformity Percentage by Sample Size",
       subtitle = "Ecoinvent Close conforming column") +
  scale_x_continuous(breaks = seq(50,1000,50)) +
  scale_y_continuous(breaks = seq(0,100,10)) +
  geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 16),
        plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 10), size = 10)) -> plot_close_conformity_sample
#marginally acceptable columns
bigData |> select(marginally_acceptable_cols[1]) |> pull() -> marginally.acceptable.numbers.bigData

sample.df.bigData <- data.frame()

  for (i in seq(50,1000,50)) {
    replicate(1000, sample_f(marginally.acceptable.numbers.bigData, i)) -> vector
    data.frame(sample.size = i, percentage.of.conforming = vector[vector != "Nonconformity"] |> length() / length(vector) * 100) -> df
    sample.df.bigData <- rbind(sample.df.bigData, df)
  }

ggplot(sample.df.bigData, aes(x = sample.size, y = percentage.of.conforming)) + 
  geom_col(fill = "#1E90FF", color = "black") +
  labs(x = "Sample Size", y = "Percentage of Conforming", 
       title = "Conformity Percentage by Sample Size",
       subtitle = "Ecoinvent Marginally acceptable column") +
  scale_x_continuous(breaks = seq(50,1000,50)) +
  scale_y_continuous(breaks = seq(0,100,10)) +
  geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 16),
        plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 10), size = 10)) -> plot_marginal_conformity_sample

#Acceptable columns

bigData |> select(acceptable_conformity_cols[1]) |> pull() -> acceptable.numbers.bigData

sample.df.bigData <- data.frame()

  for (i in seq(50,1000,50)) {
    replicate(1000, sample_f(acceptable.numbers.bigData, i)) -> vector
    data.frame(sample.size = i, percentage.of.conforming = vector[vector != "Nonconformity"] |> length() / length(vector) * 100) -> df
    sample.df.bigData <- rbind(sample.df.bigData, df)
  }

ggplot(sample.df.bigData, aes(x = sample.size, y = percentage.of.conforming)) + 
  geom_col(fill = "#1E90FF", color = "black") +
  labs(x = "Sample Size", y = "Percentage of Conforming", 
       title = "Conformity Percentage by Sample Size",
       subtitle = "Ecoinvent Acceptable column") +
  scale_x_continuous(breaks = seq(50,1000,50)) +
  scale_y_continuous(breaks = seq(0,100,10)) +
  geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 16),
        plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 10), size = 10)) -> plot_acceptable_conformity_sample

ggsave("plot_acceptable_conformity_sample.png", plot_acceptable_conformity_sample, width = 18, height = 10, units = "cm")
ggsave("plot_marginal_conformity_sample.png", plot_marginal_conformity_sample, width = 18, height = 10, units = "cm")
ggsave("plot_close_conformity_sample.png", plot_close_conformity_sample, width = 18, height = 10, units = "cm")

#bigDataCountriesGrouped0 |> select(c(Country,(marginally_acceptable_cols |> names()))) -> bigDataMarginallyAcceptable
#bigDataCountriesGrouped0 |> select(c(Country,(acceptable_conformity_cols |> names()))) -> bigDataAcceptable
```

```{r}
(conforming_cols != "Nonconformity" & conforming_cols != "Not suitable data") |> sum()

conforming_cols[conforming_cols != "Nonconformity" & conforming_cols != "Not suitable data"] |> names() -> conforming_cols_names
```

```{r}
bigData |> select(Activity.UUID_Product.UUID, Activity.Name, Country, Reference.Product.Name, Reference.Product.Unit, conforming_cols_names) -> bigData
bigDataCountriesGrouped |> select(Activity.UUID_Product.UUID, Activity.Name, Country, Reference.Product.Name, Reference.Product.Unit, conforming_cols_names) -> bigDataCountriesGrouped

bigDataCountriesGrouped |> select(Activity.UUID_Product.UUID, Activity.Name, Country, Reference.Product.Name, Reference.Product.Unit, close_conforming_cols) -> bigDataCountriesGrouped
```

```{r}
bigData |> head()
bigDataCountriesGrouped |> head()
```

```{r}
# bigData[,conforming_cols == "Not suitable data"] |> head()
```

```{r}
# bigData |> head()
# 
# bigData |> benford_conforming() -> conforming_cols
# 
# conforming_cols |> length()
# 
# bigData |> select(Activity.UUID_Product.UUID, Activity.Name, Country, Reference.Product.Name, Reference.Product.Unit, conforming_cols) |> head()
```

```{r}
bigDataCountriesGrouped |> group_by(Activity.Name) |> summarise(n = n()) |> arrange(desc(n)) -> rowsPerActivityCountriesGrouped

unique(bigDataCountriesGrouped$Activity.Name) -> uniqueActivitiesGrouped

# counter <- 0
# for (activity in uniqueActivitiesGrouped) {
#   activityData <- bigDataCountriesGrouped |> dplyr::filter(Activity.Name == activity)
#   if(activityData |> nrow() > 100){
#     counter <- counter + 1
#     cat(activity,": ")
#     activityData |> benford_conforming() -> result
#     result[result != "Nonconformity"] |> length()
#   }
# }

```

```{r warning=FALSE}

# #425
# bigDataCountriesGrouped |> dplyr::filter(str_detect(Activity.Name,"aluminium")) |> benford_conforming()
# #1410
# bigDataCountriesGrouped |> dplyr::filter(str_detect(Activity.Name,"wood")) |> benford_conforming()
# #318
# bigDataCountriesGrouped |> dplyr::filter(str_detect(Activity.Name,"concrete")) |> benford_conforming()
# #3439
# bigDataCountriesGrouped |> dplyr::filter(str_detect(Activity.Name,"electricity")) |> benford_conforming()
# #1384
# bigDataCountriesGrouped |> dplyr::filter(str_detect(Activity.Name,"heat")) |> benford_conforming()
# #425
# bigDataCountriesGrouped |> dplyr::filter(str_detect(Activity.Name,"aluminium")) |> benford_conforming()
```

```{r warning = F}
bigDataCountriesGrouped |> group_by(Reference.Product.Name) |> summarise(n = n()) |> arrange(desc(n))

unique(bigDataCountriesGrouped$Reference.Product.Name) -> uniqueRefProdName

# counter <- 0
# for (product in uniqueRefProdName) {
#   productData <- bigDataCountriesGrouped |> dplyr::filter(Reference.Product.Name == product)
#   if(productData |> nrow() >= 100){
#     counter <- counter + 1
#     cat(product,": ")
#     productData |> benford_conforming() 
#   }
# }
```

```{r}
#bigDataCountriesGrouped |>  select(-matches("unspecified", ignore.case = TRUE)) -> bigDataCountriesGrouped

unique(bigDataCountriesGrouped$Country) -> uniqueCountriesGrouped

counter <- 0
# for (country in uniqueCountriesGrouped) {
#   countryData <- bigDataCountriesGrouped |> dplyr::filter(Country == country)
#   if(countryData |> nrow() > 100){
#     counter <- counter + 1
#     cat(country,": ")
#     countryData |> benford_conforming()
#   }
# }


#bigDataCountriesGrouped |> dplyr::filter(Country == "BA") |> benford_conforming()

#bigDataCountriesGrouped |> dplyr::filter(Country == "RS") |> benford_conforming()
```

## Countries of interest

```{r}
countries_of_interest <- c("CH", "EU", "BR", "CN", "CA", "US","IN")
bigDataCountriesGrouped |> dplyr::filter(Country %in% countries_of_interest) -> data_interesting_countries
```

### Compartments - Separating data into categories (Water, Air, Soil, Natural resource)

```{r}
bigDataCountriesGrouped |> colnames() -> col_names

unique_strings <- unique(regmatches(names(bigDataCountriesGrouped), regexpr("\\|(.*?)\\|", names(bigDataCountriesGrouped))))

 
listOfDF <- list()             

for (i in 1:length(unique_strings)) {
  name <- unique_strings[i]
  bigDataCountriesGrouped |> select(Country,contains(name)) -> df
  listOfDF[[i]]<- df
}

listOfDF[[2]] -> water.data
listOfDF[[1]] -> air.data
listOfDF[[3]] -> soil.data
listOfDF[[5]] -> inventory.indicator.data
# listOfDF[[1]] -> compartment.data
listOfDF[[4]] -> natural.resource.data

```

### General plot for each category(Water, Air, Soil, Natural resource)

```{r}
# #Water data
# waterDataPlotDF <- data.frame()
# 
# for (country in countries_of_interest) {
#   water.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
#   data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
#   waterDataPlotDF <- rbind(waterDataPlotDF, df)
# }
# waterDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsWaterData
# # plotWater <- ggplot(data = waterDataPlotDF, aes(y = factor(Country, levels = factorLevelsWaterData),x = Colname, fill = factor(Conformity, levels = names(conformityColors)))) +
# #   geom_tile(width = 1, height = 1) +
# #   ylab("Country") +
# #   xlab("Columns") +
# #   labs(fill = "", title = "Water columns") +
# #   theme(axis.text.x = element_blank(), legend.position = "none") + 
# #   scale_fill_manual(values = conformityColors)
# 
# plotWater <- ggplot(data = waterDataPlotDF, aes(y = factor(Country, levels = factorLevelsWaterData), x = Colname, fill = factor(Conformity, levels = names(conformityColors)))) +
#   geom_raster() +
#   ylab("Country") +
#   xlab("Columns") +
#   labs(fill = "", title = "Water columns") +
#   theme(axis.text.x = element_blank(), legend.position = "none") + 
#   scale_fill_manual(values = conformityColors)
# 
# plotWater
# 
# 
# #Air data
# airDataPlotDF <- data.frame()
# 
# for (country in countries_of_interest) {
#   air.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
#   data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
#   airDataPlotDF <- rbind(airDataPlotDF, df)
# }
# airDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsairData
# # plotAir <- ggplot(data = airDataPlotDF, aes(y = factor(Country, levels = factorLevelsairData),x = Colname, fill = factor(Conformity, levels = names(conformityColors)))) +
# #   geom_tile(width = 1, height = 1, size = 0) +
# #   ylab("Country") +
# #   xlab("Columns") +
# #   labs(fill = "", title = "Air columns") +
# #   theme(axis.text.x = element_blank(), legend.position = "none") + 
# #   scale_fill_manual(values = conformityColors)
# 
# plotAir <- ggplot(data = airDataPlotDF, aes(y = factor(Country, levels = factorLevelsairData), x = Colname, fill = factor(Conformity, levels = names(conformityColors)))) +
#   geom_raster() +
#   ylab("Country") +
#   xlab("Columns") +
#   labs(fill = "", title = "Air columns") +
#   theme(axis.text.x = element_blank(), legend.position = "none") + 
#   scale_fill_manual(values = conformityColors)
# 
# plotAir
# 
# #Soil data
# soilDataPlotDF <- data.frame()
# 
# for (country in countries_of_interest) {
#   soil.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
#   data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
#   soilDataPlotDF <- rbind(soilDataPlotDF, df)
# }
# soilDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelssoilData
# plotSoil <- ggplot(data = soilDataPlotDF, aes(y = factor(Country, levels = factorLevelssoilData),x = Colname, fill = factor(Conformity, levels = names(conformityColors)))) +
#   geom_raster() +
#   ylab("Country") +
#   xlab("Columns") +
#   labs(fill = "", title = "Soil columns") +
#   theme(axis.text.x = element_blank(), legend.position = "none") + 
#   scale_fill_manual(values = conformityColors)
# 
# plotSoil
# 
# #Natural resources data
# natural.resourceDataPlotDF <- data.frame()
# 
# for (country in countries_of_interest) {
#   natural.resource.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
#   data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
#   natural.resourceDataPlotDF <- rbind(natural.resourceDataPlotDF, df)
# }
# natural.resourceDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsnaturalResourceData
# plotNaturalResource <- ggplot(data = natural.resourceDataPlotDF, aes(y = factor(Country, levels = factorLevelsnaturalResourceData),x = Colname, fill = factor(Conformity, levels = names(conformityColors)))) +
#   geom_raster() +
#   ylab("Country") +
#   xlab("Columns") +
#   labs(fill = "", title = "Natural resource columns") +
#   theme(axis.text.x = element_blank()) + 
#   scale_fill_manual(values = conformityColors)
# 
# plotNaturalResource
# 
# all_categories_plot <- gridExtra::grid.arrange(plotAir,plotWater,plotSoil,plotNaturalResource, ncol = 1)
# ggsave("all_categories_plot.jpg", all_categories_plot, width = 20, height = 28, units = "cm", limitsize = F)
```

### Carbon plots

```{r}
matching_columns_carbon_air <- grep("carbon .*\\|", names(air.data), value = TRUE, ignore.case = TRUE)

### Ceating datasets
air.data |> select(Country,contains(matching_columns_carbon_air)) -> carbon.air.data
water.data |> select(Country,contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.water.data
soil.data |> select(Country,contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.soil.data
natural.resource.data |> select(Country,contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.natural.resource.data

bigDataCountriesGrouped0 |> select(Country,contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.data
```

```{r}
# General carbon plot

carbonDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  carbon.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  carbonDataPlotDF <- rbind(carbonDataPlotDF, df)
}
carbonDataPlotDF <- carbonDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

carbonDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelscarbonData

plotCarbon <- ggplot(data = carbonDataPlotDF, aes(y = factor(Country, levels = factorLevelscarbonData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.4) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")
plotCarbon
carbon.data |> dplyr::filter(Country %in% countries_of_interest)|> group_by(Country) |> summarise(n = n()) |> arrange(desc(n))

ggsave("plotCarbon.jpg", plotCarbon, width = 20, height = 10, units = "cm", limitsize = F)
```

```{r}
#Carbon in air plot
carbon.airDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  carbon.air.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  carbon.airDataPlotDF <- rbind(carbon.airDataPlotDF, df)
}
carbon.airDataPlotDF <- carbon.airDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

carbon.airDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelscarbon.airData

plotCarbonAir <- ggplot(data = carbon.airDataPlotDF, aes(y = factor(Country, levels = factorLevelscarbon.airData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.4) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon in air") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

plotCarbonAir
```

```{r}
#Carbon in water
# 
# carbon.waterDataPlotDF <- data.frame()
# 
# for (country in countries_of_interest) {
#   carbon.water.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
#   data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
#   carbon.waterDataPlotDF <- rbind(carbon.waterDataPlotDF, df)
# }
# 
# carbon.waterDataPlotDF <- carbon.waterDataPlotDF %>%
#   mutate(Label = as.integer(factor(Colname)))
# 
# carbon.waterDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelscarbon.waterData
# 
# plotCarbonWater <- ggplot(data = carbon.waterDataPlotDF, aes(y = factor(Country, levels = factorLevelscarbon.waterData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
#   geom_tile(color = "black", linewidth = 0.3) +
#   ylab("Country") +
#   xlab("Columns") +
#   labs(fill = "", title = "Carbon in water") +
#   scale_fill_manual(values = conformityColors) +
#   coord_equal() +
#   theme(legend.position = "none")
# 
# plotCarbonWater

#Carbon in soil
# carbon.soilDataPlotDF <- data.frame()
# 
# for (country in countries_of_interest) {
#   carbon.soil.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
#   data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
#   carbon.soilDataPlotDF <- rbind(carbon.soilDataPlotDF, df)
# }
# 
# carbon.soilDataPlotDF <- carbon.soilDataPlotDF %>%
#   mutate(Label = as.integer(factor(Colname)))
# 
# carbon.soilDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelscarbon.soilData
# 
# plotCarbonSoil <- ggplot(data = carbon.soilDataPlotDF, aes(y = factor(Country, levels = factorLevelscarbon.soilData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
#   geom_tile(color = "black", linewidth = 0.3) +
#   ylab("Country") +
#   xlab("Columns") +
#   labs(fill = "", title = "Carbon in soil") +
#   scale_fill_manual(values = conformityColors) +
#   coord_equal() +
#   theme(legend.position = "none")
# 
# plotCarbonSoil

#Carbon in natural resources

carbon.natural.resourceDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  carbon.natural.resource.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  carbon.natural.resourceDataPlotDF <- rbind(carbon.natural.resourceDataPlotDF, df)
}

carbon.natural.resourceDataPlotDF <- carbon.natural.resourceDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

carbon.natural.resourceDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelscarbon.natural.resourceData

plotCarbonNaturalResource <- ggplot(data = carbon.natural.resourceDataPlotDF, aes(y = factor(Country, levels = factorLevelscarbon.natural.resourceData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon in natural resource") +
  scale_fill_manual(values = conformityColors) +
  theme(legend.position = "none", plot.title = element_text(vjust = 0)) +
  coord_equal()

plotCarbonNaturalResource

gridExtra::grid.arrange(plotCarbonAir, plotCarbonNaturalResource, ncol = 1)
#ggsave("all_categories_carbon.jpg", all_categories_carbon, width = 20, height = 12, units = "cm")

bigDataCountriesGrouped |> dplyr::filter(Country == "IN")
```

### Arsenic plots

```{r}
#Arsenic data plot

bigDataCountriesGrouped |> select(Country,matches("Arsenic|Arsine")) -> arsenic.data

arsenicDataPlotDF <- data.frame()
    
for (country in countries_of_interest) {
    arsenic.data |> dplyr::filter(Country == country) -> data
    data |> benford_conforming() -> benfordVec
    data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country) -> df
    arsenicDataPlotDF <- rbind(arsenicDataPlotDF, df)
}

arsenicDataPlotDF <- arsenicDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

arsenicDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsarsenicData

plotArsenic <- ggplot(data = arsenicDataPlotDF, aes(y = factor(Country, levels = factorLevelsarsenicData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.5) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Arsenic") +
  scale_fill_manual(values = conformityColors) +
  coord_equal()

plotArsenic


```

### Heavy metals plots

```{r}
#Heavy metals in air
heavy_metals <- c("Lead", "Mercury", "Cadmium", "Arsenic", "Chromium", "Nickel", "Copper", "Zinc", "Manganese", "Iron")
# select names of all columns that contain some of the heavy metals

bigDataCountriesGrouped |> select(Country,matches(paste(heavy_metals, collapse = "|"))) |> colnames() -> heavyMetals

air.data |> select(Country,matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.air.data

heavy.metals.airDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  heavy.metals.air.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.airDataPlotDF <- rbind(heavy.metals.airDataPlotDF, df)
}

  heavy.metals.airDataPlotDF <-   heavy.metals.airDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))
  
heavy.metals.airDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsheavy.metals.airData

plotheavy.metals.air <- ggplot(data = heavy.metals.airDataPlotDF, aes(y = factor(Country, levels = factorLevelsheavy.metals.airData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metal in air") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

plotheavy.metals.air
#Heavy metals in soil
soil.data |> select(Country,matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.soil.data

heavy.metals.soilDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  heavy.metals.soil.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.soilDataPlotDF <- rbind(heavy.metals.soilDataPlotDF, df)
}

  heavy.metals.soilDataPlotDF <-   heavy.metals.soilDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))
  
heavy.metals.soilDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsheavy.metals.soilData

plotheavy.metals.soil <- ggplot(data = heavy.metals.soilDataPlotDF, aes(y = factor(Country, levels = factorLevelsheavy.metals.soilData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metal in soil") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

plotheavy.metals.soil
#Heavy metals in water
water.data |> select(Country,matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.water.data

heavy.metals.waterDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  heavy.metals.water.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.waterDataPlotDF <- rbind(heavy.metals.waterDataPlotDF, df)
}

  heavy.metals.waterDataPlotDF <-   heavy.metals.waterDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

heavy.metals.waterDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsheavy.metals.waterData

plotheavy.metals.water <- ggplot(data = heavy.metals.waterDataPlotDF, aes(y = factor(Country, levels = factorLevelsheavy.metals.waterData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metal in water") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

plotheavy.metals.water

#Heavy metals in Natural resources
natural.resource.data |> select(Country,matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.natural.resource.data

heavy.metals.natural.resourceDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  heavy.metals.natural.resource.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.natural.resourceDataPlotDF <- rbind(heavy.metals.natural.resourceDataPlotDF, df)
}

  heavy.metals.natural.resourceDataPlotDF <-   heavy.metals.natural.resourceDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

heavy.metals.natural.resourceDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsheavy.metals.natural.resourceData

plotheavy.metals.natural.resource <- ggplot(data = heavy.metals.natural.resourceDataPlotDF, aes(y = factor(Country, levels = factorLevelsheavy.metals.natural.resourceData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metal in natural resources") +
  scale_fill_manual(values = conformityColors) +
  coord_equal()

plotheavy.metals.natural.resource

all_categories_heavy_metals <- gridExtra::grid.arrange(plotheavy.metals.air,plotheavy.metals.soil, plotheavy.metals.water, plotheavy.metals.natural.resource, ncol = 1)
ggsave("all_categories_heavy_metals.jpg", all_categories_heavy_metals, width = 20, height = 28, units = "cm", limitsize = F)
```

## Checking non conforming columns in heavy metals

```{r}
#bigDataCountriesGrouped |> select("Country", "Arsenic|natural resource|in ground") |> dplyr::filter(Country %in% c("EU","CN","IN","US","BR","CH","CA") &  "Arsenic|natural resource|in ground" != 0) |> group_by(Country) |> summarise(sum = sum(`Arsenic|natural resource|in ground`), non.zero = sum(`Arsenic|natural resource|in ground` != 0), min = min(`Arsenic|natural resource|in ground`), max = max(`Arsenic|natural resource|in ground`), mean = mean(`Arsenic|natural resource|in ground`), median = median(`Arsenic|natural resource|in ground`), sd = sd(`Arsenic|natural resource|in ground`))

# Brasil, Swizerland, and EU are conforming

bigDataCountriesGrouped |> select("Country", "Zinc II|water|surface water") |> dplyr::filter(Country %in% c("EU","CN","IN","US","BR","CH","CA") & `Zinc II|water|surface water` != 0) |> group_by(Country) |> summarise(n = n(),sum = sum(`Zinc II|water|surface water`), non.zero = sum(`Zinc II|water|surface water` != 0), min = min(`Zinc II|water|surface water`), max = max(`Zinc II|water|surface water`), mean = mean(`Zinc II|water|surface water`), median = median(`Zinc II|water|surface water`), sd = sd(`Zinc II|water|surface water`))



data("census.2009")
census.first.digit <- data.frame()
census.2009$pop.2009 |> first_digit() |> sd()
census.2009$pop.2009 |> first_digit() |> mean()


census.2009 |> select(state, pop.2009) |>  group_by(state) |> summarise(n = n(),sum = sum(pop.2009), non.zero = sum(pop.2009 != 0), min = min(pop.2009), max = max(pop.2009), mean = mean(pop.2009), median = median(pop.2009), sd = sd(pop.2009)) |> arrange(desc(n)) |> dplyr::filter(n > 100) |> pull(state) -> states_of_interest
states.df <- data.frame()
for(state1 in states_of_interest){
  census.2009 |> dplyr::filter(state == state1) |> pull(pop.2009) |> benford(1)-> b
  data.frame(Conformity = b$MAD.conformity, State = state1, row.names = NULL) -> df
  states.df <- rbind(states.df, df)
}
states.df |> group_by(Conformity) |> summarise(n = n()) |> arrange(desc(n))

states.df[states.df$Conformity != "Nonconformity",] |> nrow() / states.df |> nrow() * 100


census.2009 |> pull(pop.2009) |> benford(1)



```

## Green house gases

```{r}

bigDataCountriesGrouped |> colnames() -> colnames
greenhouse_gases <- colnames[grep("(Country|Carbon Dioxide|Methane|Nitrous Oxide|Water Vapor|Ozone|Chlorofluorocarbons|Hydrofluorocarbons|Perfluorocarbons|Sulfur Hexafluoride)", colnames, ignore.case = TRUE)]

bigDataCountriesGrouped[,greenhouse_gases] -> greenHouseGasesData
greenHouseGasesData |> colnames() -> greenHouseGases
unique(regmatches(names(greenHouseGasesData), regexpr("\\|(.*?)\\|", names(greenHouseGasesData))))

air.data |> colnames() -> airColnames
GHGAir <- airColnames[grep("(Country|Carbon Dioxide|Methane|Nitrous Oxide|Water Vapor|Ozone|Chlorofluorocarbons|Hydrofluorocarbons|Perfluorocarbons|Sulfur Hexafluoride)", airColnames, ignore.case = TRUE)]

air.data[,GHGAir] -> GHGAirAirData

greenHouseGasesData|> dplyr::filter(Country == "CN") |> benford_conforming() -> benfordVec
benfordVec[44]

```

```{r}
greenHouseGasesDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  greenHouseGasesData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  greenHouseGasesDataPlotDF <- rbind(greenHouseGasesDataPlotDF, df)
}
greenHouseGasesDataPlotDF|> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsGreenHouseGasesDataPlotDF

greenHouseGasesDataPlotDF$ShortenedColname <- sub("^(.*?\\|.*?)\\|.*$", "\\1", greenHouseGasesDataPlotDF$Colname)
greenHouseGasesDataPlotDF$ShortenedColname <- sub("\\|", " in the ", greenHouseGasesDataPlotDF$ShortenedColname)
greenHouseGasesDataPlotDF <- greenHouseGasesDataPlotDF |> 
  mutate(Label = as.integer(factor(Colname)))
plotGreenHouseGases <- ggplot(data = greenHouseGasesDataPlotDF, aes(y = factor(Country, levels = factorLevelsGreenHouseGasesDataPlotDF),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color= "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Green house gases") +
  scale_fill_manual(values = conformityColors) +
  coord_equal()

plotGreenHouseGases

ggsave("plotGreenHouseGases.jpg", plotGreenHouseGases, width = 20, height = 10, units = "cm", limitsize = F)



```

## Toxic substances

```{r}

toxicSubstances <- colnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", colnames, ignore.case = TRUE)]

bigDataCountriesGrouped[,toxicSubstances] -> toxicSubstancesData

unique(regmatches(names(toxicSubstancesData), regexpr("\\|(.*?)\\|", names(toxicSubstancesData))))

air.data |> colnames() -> airColnames
toxicSubstancesAir <- airColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", airColnames, ignore.case = TRUE)]

air.data[,toxicSubstancesAir] -> toxicSubstancesAirData

water.data |> colnames() -> waterColnames
toxicSubstancesWater <- waterColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", waterColnames, ignore.case = TRUE)]

water.data[,toxicSubstancesWater] -> toxicSubstancesWaterData

soil.data |> colnames() -> soilColnames
toxicSubstancesSoil <- soilColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", soilColnames, ignore.case = TRUE)]

soil.data[,toxicSubstancesSoil] -> toxicSubstancesSoilData

natural.resource.data |> colnames() -> naturalResourcesColnames

toxicSubstancesNaturalResources <- naturalResourcesColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", naturalResourcesColnames, ignore.case = TRUE)]

natural.resource.data[,toxicSubstancesNaturalResources] -> toxicSubstancesNaturalResourcesData


```

```{r}
toxicSubstancesDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  toxicSubstancesData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesDataPlotDF <- rbind(toxicSubstancesDataPlotDF, df)
}
toxicSubstancesDataPlotDF|> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelstoxicSubstancesDataPlotDF

toxicSubstancesDataPlotDF$ShortenedColname <- sub("^(.*?\\|.*?)\\|.*$", "\\1", toxicSubstancesDataPlotDF$Colname)
toxicSubstancesDataPlotDF$ShortenedColname <- sub("\\|", " in the ", toxicSubstancesDataPlotDF$ShortenedColname)
toxicSubstancesDataPlotDF <- toxicSubstancesDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))
```

```{r}
plotToxicSubstances <- ggplot(data = toxicSubstancesDataPlotDF, aes(y = factor(Country, levels = factorLevelstoxicSubstancesDataPlotDF),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.15) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(axis.text.x = element_text(size = 5),
        axis.text.y =element_text(size = 5),
        legend.key = element_rect(colour = "black", size = 1))

plotToxicSubstances

ggsave("plotToxicSubstances.png", plotToxicSubstances, width = 20, height = 10, units = "cm")
```

### Toxic substances per category

```{r}
#TOXIC SUBSTANCES IN AIR
toxicSubstancesAirDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  toxicSubstancesAirData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesAirDataPlotDF <- rbind(toxicSubstancesAirDataPlotDF, df)
}
toxicSubstancesAirDataPlotDF <- toxicSubstancesAirDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

toxicSubstancesAirDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsToxicSubstancesAirData

toxicSubstancesAirDataPlot <- ggplot(data = toxicSubstancesAirDataPlotDF, aes(y = factor(Country, levels = factorLevelsToxicSubstancesAirData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in air") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

toxicSubstancesAirDataPlot

#TOXIC SUBSTANCES IN WATER
toxicSubstancesWaterDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  toxicSubstancesWaterData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesWaterDataPlotDF <- rbind(toxicSubstancesWaterDataPlotDF, df)
}

toxicSubstancesWaterDataPlotDF <- toxicSubstancesWaterDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

toxicSubstancesWaterDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsToxicSubstancesWaterData

toxicSubstancesWaterDataPlot <- ggplot(data = toxicSubstancesWaterDataPlotDF, aes(y = factor(Country, levels = factorLevelsToxicSubstancesWaterData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in water") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

toxicSubstancesWaterDataPlot

#TOXIC SUBSTANCES IN SOIL

toxicSubstancesSoilDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  toxicSubstancesSoilData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesSoilDataPlotDF <- rbind(toxicSubstancesSoilDataPlotDF, df)
}

toxicSubstancesSoilDataPlotDF <- toxicSubstancesSoilDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

toxicSubstancesSoilDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsToxicSubstancesSoilData

toxicSubstancesSoilDataPlot <- ggplot(data = toxicSubstancesSoilDataPlotDF, aes(y = factor(Country, levels = factorLevelsToxicSubstancesSoilData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in soil") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

toxicSubstancesSoilDataPlot

#TOXIC SUBSTANCES IN NATURAL RESOURCES

toxicSubstancesNaturalResourcesDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  toxicSubstancesNaturalResourcesData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesNaturalResourcesDataPlotDF <- rbind(toxicSubstancesNaturalResourcesDataPlotDF, df)
}

toxicSubstancesNaturalResourcesDataPlotDF <- toxicSubstancesNaturalResourcesDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

toxicSubstancesNaturalResourcesDataPlotDF |> group_by(Country) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Country)-> factorLevelsToxicSubstancesNaturalResourcesData

toxicSubstancesNaturalResourcesDataPlot <- ggplot(data = toxicSubstancesNaturalResourcesDataPlotDF, aes(y = factor(Country, levels = factorLevelsToxicSubstancesNaturalResourcesData),x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in natural resources") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

toxicSubstancesNaturalResourcesDataPlot

#Combine and save plots

all_categories_toxic_substances <- gridExtra::grid.arrange(toxicSubstancesAirDataPlot,toxicSubstancesWaterDataPlot, toxicSubstancesSoilDataPlot, toxicSubstancesNaturalResourcesDataPlot, layout_matrix = rbind(c(1,1), c(2,2), c(4, 3)),  heights = c(2,1.65,1.65))
ggsave("all_categories_toxic_substances.jpg", all_categories_toxic_substances, width = 20, height = 28, units = "cm", limitsize = F)
```

### Suspect detection plots

```{r}
B <- benford((inventory.indicator.data[,2]), number.of.digits = 1)
    B_data <-getBfd(B)
    B_suspects <- getSuspects(B, data)
    B_data$suspect <- ifelse(B_data$squared.diff > 6, "yes", "no")
    
    p<-ggplot(data=B_data, aes(x=digits, y=data.dist * 100, fill=suspect))+
      theme_bw() +
      scale_x_continuous(name="Digit",breaks= seq(0,10,1)) +
      scale_y_continuous(name="Percentage") +
      geom_col(width= 0.6)+stat_smooth(aes(x = digits, y = benford.dist * 100), fill="darkseagreen4",color='springgreen4', linewidth=1)+ 
      scale_fill_manual(values = c("dodgerblue3", "red3","darkseagreen4"))+ 
      theme(legend.position = "none")+
      theme(plot.title = element_text(size=12))
p


```

```{r}

columns_of_interest <- names(inventory.indicator.data)[-1]

# Create a list to store individual plots
plot_list <- list()         

for (column in columns_of_interest) {
  B <- benford(inventory.indicator.data[[column]], number.of.digits = 1)
  B_data <- getBfd(B)
  B_suspects <- getSuspects(B, data)
  B_data$suspect <- ifelse(B_data$squared.diff > 6, "yes", "no")
  cat(B$MAD.conformity, "\n")
   p <- ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
    theme_bw() +
    scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
    scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) + 
    geom_col(width = 0.6, color = "black") +
    geom_point(size = 0.7) +
    labs(title = str_wrap(strsplit(column, "\\|")[[1]][1],width = 40))+
    stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = .4) +
    scale_fill_manual(values = c("#FFC300", "#FF5733")) +
    theme(plot.title = element_text(size = 12,hjust = 0.5),
          panel.border = element_rect(size = 1),
          legend.position = "none")
  
  plot_list[[column]] <- p
}

# Combine individual plots using grid.arrange from gridExtra
combined_plots_inventory_indicator <- gridExtra::grid.arrange(plot_list[[1]],plot_list[[2]],plot_list[[3]],plot_list[[4]],ncol = 2)

# Display the combined plot
print(combined_plots_inventory_indicator)
ggsave

ggsave("combined_plots_inventory_indicator.jpg", combined_plots_inventory_indicator, width = 20, height = 13, units = "cm", limitsize = F)

column
```

## Perfect Benford

```{r}
# generate_benfords_numbers <- function(n) {
#   digits <- 1:9
#   probabilities <- log10(1 + 1/digits)
#   
#   # Normalize probabilities to sum to 1
#   probabilities <- probabilities / sum(probabilities)
#   
#   # Generate random numbers based on Benford's Law
#   benfords_numbers <- sample(digits, n, replace = TRUE, prob = probabilities)
#   
#   return(benfords_numbers)
# }
# 
# set.seed(123)  # Setting a seed for reproducibility
# benfords_numbers <- generate_benfords_numbers(23523)
# 
# benfords_numbers |> benford(1)
```

# Finding optimal sample size

```{r}
# sample_f <- function(x, n) {
#   benford_vector <- sample(x, n) |> benford(1)
#   return(benford_vector$MAD.conformity)
# }
# 
# 
# replicate(100, sample_f(benfords_numbers, 550)) -> conformity_vector
# conformity_vector[conformity_vector != "Nonconformity"] |> length() / length(conformity_vector) * 100
# 
# replicate_f <- function(){
#   sample.df <- data.frame()
# 
#   for (i in seq(50,1000,50)) {
#     replicate(1000, sample_f(benfords_numbers, i)) -> vector
#     data.frame(sample.size = i, percentage.of.conforming = vector[vector != "Nonconformity"] |> length() / length(vector) * 100) -> df
#     sample.df <- rbind(sample.df, df)
#   }
#   return(sample.df)
# }
# 
# replicate_f() -> sample.df
# 
# replicate_f() -> sample.df2
# 
# replicate_f() -> sample.df3
# 

```

```{r}
# ggplot(data = sample.df, aes(x = sample.size, y = percentage.of.conforming)) +
#   geom_line(linewidth = 1.2, color = "#1E90FF") +
#   scale_x_continuous(name = "Sample size",breaks = seq(50,1000,50)) +
#   scale_y_continuous(name = "Percentage of conforming", breaks = seq(0,100,10)) +
#   geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
#   theme_bw()            
# 
# ggplot(sample.df3, aes(x = sample.size, y = percentage.of.conforming)) + 
#   geom_col(fill = "#1E90FF", color = "black") +
#   labs(x = "Sample Size", y = "Percentage of Conforming", 
#        title = "Conformity Percentage by Sample Size",
#        subtitle = "Numbers generated based on Benford probabilities") +
#   scale_x_continuous(breaks = seq(50,1000,50)) +
#   scale_y_continuous(breaks = seq(0,100,10)) +
#   geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
#   theme_bw() +
#   theme(plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 16),
#          plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 10), size = 10))
# 
# ggsave("sample_size_conformity.png", width = 18, height = 10, units = "cm", limitsize = F)
# 

```

```{r}
B <- benford((benfords_numbers), number.of.digits = 1)
    B_data <-getBfd(B)
    B_suspects <- getSuspects(B, data)
    B_data$suspect <- ifelse(B_data$squared.diff > 6, "yes", "no")
    
    ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
  theme_bw() +
  scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
  scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) +  # Adjust the 'mult' parameter to control the expansion
  geom_col(color = "black") +
      geom_point() +
  stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1) +
  scale_fill_manual(values = c("#FFC300", "#FF5733")) +
  theme(plot.title = element_text(size = 12),
        panel.border = element_rect(size = 1))

print(p)

```

## Example column suspect test

```{r}
toxicSubstancesWaterDataPlotDF
toxicSubstancesWaterData |> dplyr::filter(Country %in% c("BR","EU","CH","CA"))|> pull("Cadmium II|water|surface water") |> benford(number.of.digits = 1) -> B
B_data <-getBfd(B)
B_suspects <- getSuspects(B, data)
B_data$suspect <- ifelse(B_data$squared.diff > 6, "yes", "no")
B$MAD.conformity
ConfPlot <- ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
  theme_bw() +
  scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
  scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) +
  geom_col(position = "dodge", width = 0.6, color = "black") +  # Adjust width for spacing between columns
  geom_point(size = 0.7) +
  labs(title = str_wrap("Cadmium II in surface water"), subtitle = "CONFORMING GROUP") +
  stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1) +
  scale_fill_manual(values = c("#FFC300", "#FF5733")) +
   theme(plot.title = element_text(size = 12, hjust = 0.5),
        plot.subtitle = element_text(size = 10, hjust = 0.5),
        panel.border = element_rect(size = 1))
ConfPlot

toxicSubstancesWaterDataPlotDF
toxicSubstancesWaterData |> dplyr::filter(Country %in% c("IN","CN","US"))|> pull("Cadmium II|water|surface water") |> benford(number.of.digits = 1) -> B
B_data <-getBfd(B)
B_suspects <- getSuspects(B, data)
B_data$suspect <- ifelse(B_data$squared.diff > 6, "yes", "no")

NonConfPlot <- ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
  theme_bw() +
  scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
  scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) +
  geom_col(position = "dodge", width = 0.6, color = "black") +  # Adjust width for spacing between columns
  geom_point(size = 0.7) +
  labs(title = str_wrap("Cadmium II in surface water"), subtitle = "NONCONFORMING GROUP") +
  stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1) +
  scale_fill_manual(values = c("#FFC300", "#FF5733")) +
  theme(plot.title = element_text(size = 12, hjust = 0.5),
        plot.subtitle = element_text(size = 10, hjust = 0.5),
        panel.border = element_rect(size = 1))

NonConfPlot
B$MAD.conformity
gridExtra::grid.arrange(ConfPlot,NonConfPlot, ncol = 2) -> g
ggsave("conforming_vs_nonconforming_same_column.jpg", g, width = 20, height = 7, units = "cm")
```

```{r}


heavy.metals.water.data |> dplyr::filter(Country %in% c("BR", "EU", "CH")) |> pull("Zinc II|water|surface water") |> benford(number.of.digits = 1) -> B
B_data <-getBfd(B)
B_suspects <- getSuspects(B, data)
B_data$suspect <- ifelse(B_data$squared.diff > 6, "yes", "no")
ConfPlot <- ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
  theme_bw() +
  scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
  scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) +
  geom_col(position = "dodge", width = 0.6, color = "black") +  # Adjust width for spacing between columns
  geom_point(size = 0.7) +
  labs(title = str_wrap("Zinc II in surface water - CONFORMING GROUP")) +
  stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1) +
  scale_fill_manual(values = c("#FFC300", "#FF5733")) +
  theme(plot.title = element_text(size = 12),
        panel.border = element_rect(size = 1))
ConfPlot


```

```{r}
heavy.metals.water.data |> dplyr::filter(Country %in% c("CA", "US", "CN","IN")) |> pull("Zinc II|water|surface water") |> benford(number.of.digits = 1) -> B
B_data <-getBfd(B)
B_suspects <- getSuspects(B, data)
B_data$suspect <- ifelse(B_data$squared.diff > 6, "yes", "no")
NonConfPlot <- ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
  theme_bw() +
  scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
  scale_y_continuous(name = "Percentage", expand = expand_scale(mult = c(0, 0.05))) +
  geom_col(position = "dodge", width = 0.6, color = "black") +  # Adjust width for spacing between columns
  geom_point(size = 0.7) +
  labs(title = str_wrap("Zinc II in surface water - NONCONFORMING GROUP")) +
  stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1) +
  scale_fill_manual(values = c("#FFC300", "#FF5733")) +
  theme(plot.title = element_text(size = 12),
        panel.border = element_rect(size = 1))
NonConfPlot
```

# Checking all columns together for each country

```{r}
# do.call(c, bigDataCountriesGrouped |> dplyr::filter(Country == "EU") |> select_if(is.numeric)) -> EU_all
# 
# do.call(c, bigDataCountriesGrouped |> dplyr::filter(Country == "CN") |> select_if(is.numeric)) -> CN_all
# 
# do.call(c, bigDataCountriesGrouped |> dplyr::filter(Country == "IN") |> select_if(is.numeric)) -> IN_all
# 
# do.call(c, bigDataCountriesGrouped |> dplyr::filter(Country == "BR") |> select_if(is.numeric)) -> BR_all
# 
# do.call(c, bigDataCountriesGrouped |> dplyr::filter(Country == "US") |> select_if(is.numeric)) -> US_all
# 
# do.call(c, bigDataCountriesGrouped |> dplyr::filter(Country == "CA") |> select_if(is.numeric)) -> CA_all
# 
# do.call(c, bigDataCountriesGrouped |> dplyr::filter(Country == "CH") |> select_if(is.numeric)) -> CH_all
```

```{r}
bigDataCountriesGrouped |> dplyr::filter(Country == "EU") |> benford_conforming_combined2() -> EU_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "CN") |> benford_conforming_combined2() -> CN_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "IN") |> benford_conforming_combined2() -> IN_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "BR") |> benford_conforming_combined2() -> BR_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "US") |> benford_conforming_combined2() -> US_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "CA") |> benford_conforming_combined2() -> CA_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "CH") |> benford_conforming_combined2() -> CH_all_benford
```

```{r}
# first_digits_EU <- sapply(EU_all, first_digit)
# first_digits_EU |> benford(number.of.digits = 1) -> EU_all_benford
# EU_all_benford |> plot()
# 
# 
# first_digits_CN <- sapply(CN_all, first_digit)
# first_digits_CN |> benford(number.of.digits = 1) -> CN_all_benford
# 
# first_digits_IN <- sapply(IN_all, first_digit)
# first_digits_IN |> benford(number.of.digits = 1) -> IN_all_benford
# 
# first_digits_BR <- sapply(BR_all, first_digit)
# first_digits_BR |> benford(number.of.digits = 1) -> BR_all_benford
# 
# first_digits_US <- sapply(US_all, first_digit)
# first_digits_US |> benford(number.of.digits = 1) -> US_all_benford
# 
# first_digits_CA <- sapply(CA_all, first_digit)
# first_digits_CA |> benford(number.of.digits = 1) -> CA_all_benford
# 
# first_digits_CH <- sapply(CH_all, first_digit)
# first_digits_CH |> benford(number.of.digits = 1) -> CH_all_benford
```

```{r}
cat("China:",CN_all_benford$MAD.conformity, "\n")
cat("India:",IN_all_benford$MAD.conformity, "\n")
cat("Brazil:",BR_all_benford$MAD.conformity, "\n")
cat("USA:",US_all_benford$MAD.conformity, "\n")
cat("Canada:",CA_all_benford$MAD.conformity, "\n")
cat("Switzerland:",CH_all_benford$MAD.conformity, "\n")
cat("EU:",EU_all_benford$MAD.conformity, "\n")
```

# Grouping by continent

```{r}
get_continent <- function(country_code) {
  # Define a list of country codes to continents, with updated classifications
  continent_map <- list(
    "US" = "North America", "BR" = "South America", "IN" = "Asia", 
    "CN" = "Asia", "CH" = "Europe", "EU" = "Europe", 
    "CA" = "North America", "AU" = "Australia/Oceania", "JP" = "Asia", 
    "KR" = "Asia", "MX" = "North America", "NG" = "Africa", 
    "RoW" = "Rest of World", "RER" = "Europe", "CO" = "South America", 
    "Europe without Switzerland" = "Europe", "PE" = "South America", 
    "ZA" = "Africa", "UCTE" = "Europe", "RNA" = "Unknown", 
    "EC" = "South America", "IAI Area, Asia, without China and GCC" = "Asia", 
    "IAI Area, EU27 & EFTA" = "Europe", "IAI Area, Russia & RER w/o EU27 & EFTA" = "Europe", 
    "IAI Area, South America" = "South America", "UN-OCEANIA" = "Australia/Oceania", 
    "IAI Area, Africa" = "Africa", "IAI Area, Gulf Cooperation Council" = "Asia", 
    "IAI Area, North America" = "North America", "RAF" = "Unknown", 
    "RER w/o RU" = "Europe", "RLA" = "South America", "RU" = "Europe", 
    "SAS" = "Asia", "UN-SEASIA" = "Asia", "CL" = "South America", 
    "TR" = "Asia", "PH" = "Asia", "CR" = "North America", 
    "BD" = "Asia", "IL" = "Asia", "TN" = "Africa", 
    "KZ" = "Asia", "GH" = "Africa", "ID" = "Asia", 
    "AR" = "South America", "TH" = "Asia", "UA" = "Europe", 
    "CI" = "Africa", "HN" = "North America", "KE" = "Africa", 
    "MY" = "Asia", "VN" = "Asia", "North America without Quebec" = "North America", 
    "ZM" = "Africa", "CM" = "Africa", "IS" = "Europe", 
    "NI" = "North America", "NZ" = "Australia/Oceania", "SV" = "North America", 
    "WECC" = "North America", "NO" = "Europe", "GB" = "Europe", 
    "TW" = "Asia", "TZ" = "Africa", "BA" = "Europe", 
    "RS" = "Europe", "MK" = "Europe", "IR" = "Asia", 
    "NP" = "Asia", "SA" = "Asia", "AE" = "Asia", 
    "AL" = "Europe", "AM" = "Asia", "AO" = "Africa", 
    "AZ" = "Asia", "BH" = "Asia", "BJ" = "Africa", 
    "BN" = "Asia", "BO" = "South America", "BW" = "Africa", 
    "BY" = "Europe", "CD" = "Africa", "CG" = "Africa", 
    "CU" = "North America", "CW" = "North America", "DO" = "North America", 
    "DZ" = "Africa", "EG" = "Africa", "ER" = "Africa", 
    "ET" = "Africa", "GA" = "Africa", "GE" = "Asia", 
    "GI" = "Europe", "GT" = "North America", "HK" = "Asia", 
    "HT" = "North America", "IQ" = "Asia", "JM" = "North America", 
    "JO" = "Asia", "KG" = "Asia", "KH" = "Asia", 
    "KP" = "Asia", "KW" = "Asia", "LB" = "Asia", 
    "LK" = "Asia", "LY" = "Africa", "MA" = "Africa", 
    "MD" = "Europe", "ME" = "Europe", "MM" = "Asia", 
    "MN" = "Asia", "MU" = "Africa", "MZ" = "Africa", 
    "NE" = "Africa", "OM" = "Asia", "PA" = "North America", 
    "PK" = "Asia", "PY" = "South America", "QA" = "Asia", 
    "SD" = "Africa", "SG" = "Asia", "SN" = "Africa", 
    "SS" = "Africa", "SY" = "Asia", "TG" = "Africa", 
    "TJ" = "Asia", "TM" = "Asia", "TT" = "North America", 
    "UY" = "South America", "UZ" = "Asia", "VE" = "South America", 
    "XK" = "Europe", "YE" = "Asia", "ZW" = "Africa", 
    "RoE" = "Europe", "PG" = "Australia/Oceania", "Europe, without Russia and Türkiye" = "Europe", 
    "Europe without Austria" = "Europe", "MG" = "Africa", "ENTSO-E" = "Europe", 
    "RAS" = "Unknown", "RME" = "Unknown", "WEU" = "Europe", 
    "NORDEL" = "Europe", "UCTE without Germany" = "Europe", "RER w/o CH+DE" = "Europe", 
    "Europe without Switzerland and Austria" = "Europe", "RW" = "Unknown", "RER w/o DE+NL+RU" = "Europe"
  )
  
  continent <- continent_map[[country_code]]
  
  if (is.null(continent)) {
    continent <- "Unknown"  # Fallback for unmapped codes
  }
  
  return(continent)
}
# Test the function with a sample of the provided country codes
sample_codes <- c("US", "BR", "CN", "CH", "EU", "IN", "RoW", "IAI Area, Asia, without China and GCC", "UN-OCEANIA")
sapply(sample_codes, get_continent)

bigDataCountriesGrouped |> mutate(Continent = sapply(Country, get_continent)) -> bigDataCountriesGrouped
#bigDataCountriesGrouped0 |> mutate(Continent = sapply(Country, get_continent)) -> bigDataCountriesGrouped0
```

```{r}
bigDataCountriesGrouped |> dplyr::filter(Continent == "Europe") -> EuropeData
bigDataCountriesGrouped |> dplyr::filter(Continent == "Asia") -> AsiaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "North America") -> NorthAmericaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "South America") -> SouthAmericaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "Africa") -> AfricaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "Australia/Oceania") -> AustraliaOceaniaData

cat("Europe data rows:",EuropeData |> nrow(), "\n")
cat("Asia data rows:",AsiaData |> nrow(), "\n")
cat("North America data rows:",NorthAmericaData |> nrow(), "\n")
cat("South America data rows:",SouthAmericaData |> nrow(), "\n")
cat("Africa data rows:",AfricaData |> nrow(), "\n")
cat("Australia/Oceania data rows:",AustraliaOceaniaData |> nrow(), "\n")
```

```{r}
```

```{r}

AsiaData |> benford_conforming_stats() -> AsiaColsBenfordVec
EuropeData |> benford_conforming_stats() -> EuropeColsBenfordVec
NorthAmericaData |> benford_conforming_stats() -> NorthAmericaColsBenfordVec
SouthAmericaData |> benford_conforming_stats() -> SouthAmericaColsBenfordVec
AfricaData |> benford_conforming_stats() -> AfricaColsBenfordVec
AustraliaOceaniaData |> benford_conforming_stats() -> AustraliaOceaniaColsBenfordVec


```

```{r}
EuropeData |> benford_conforming() -> EuropeBenfordVec
AsiaData |> benford_conforming() -> AsiaBenfordVec
NorthAmericaData |> benford_conforming() -> NorthAmericaBenfordVec
SouthAmericaData |> benford_conforming() -> SouthAmericaBenfordVec
AfricaData |> benford_conforming() -> AfricaBenfordVec
AustraliaOceaniaData |> benford_conforming() -> AustraliaOceaniaBenfordVec


EuropeBenfordVec |> length()
```


```{r}
asia_df <- data.frame(Continent = "Asia", Conformity = AsiaBenfordVec, Colname = names(AsiaBenfordVec))
europe_df <- data.frame(Continent = "Europe", Conformity = EuropeBenfordVec, Colname = names(EuropeBenfordVec))
north_america_df <- data.frame(Continent = "North America", Conformity = NorthAmericaBenfordVec, Colname = names(NorthAmericaBenfordVec))
south_america_df <- data.frame(Continent = "South America", Conformity = SouthAmericaBenfordVec, Colname = names(SouthAmericaBenfordVec))
africa_df <- data.frame(Continent = "Africa", Conformity = AfricaBenfordVec, Colname = names(AfricaBenfordVec))

AsiaBenfordVec |> length()

all_df <- rbind(asia_df, europe_df, north_america_df, south_america_df, africa_df)
all_df |> mutate(Label = as.integer(factor(Colname))) -> all_df
```

# Carbon plot by continent

```{r}
matches <- grep("carbon .*\\|", all_df$Colname, value = TRUE, ignore.case = TRUE)
all_df |> dplyr::filter(Colname %in% matches) -> carbon_df
carbon_df |> mutate(Label2 = as.integer(factor(Colname))) -> carbon_df
carbon_df |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> carbon_df_levels
carbon_df |> ggplot(aes(y = factor(Continent, levels = carbon_df_levels), x = as.factor(Label2), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", legend.key = element_rect(colour = "black", size = 0.1))

ggsave("carbon_by_continent.jpg", last_plot(), width = 20, height = 10, units = "cm", limitsize = F)

carbon_df$Conformity |> table()

carbon_df |> select(-Label) |> rename(Label = Label2) |> write_csv("carbon_by_continent.csv")

```

# Toxic substances plot by continent

```{r}
# toxic substances by continent
all_df |>  dplyr::filter(Colname %in% toxicSubstances) -> toxicSubstances_df
all_df |> filter(Colname %in% close_conforming_cols)|>  dplyr::filter(Colname %in% toxicSubstances) -> toxicSubstances_df


toxicSubstances_df |> mutate(Label2 = as.integer(factor(Colname))) -> toxicSubstances_df

toxicSubstances_df |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> toxicSubstances_df_levels

toxicSubstances_df |> ggplot(aes(y = factor(Continent, levels = toxicSubstances_df_levels), x = as.factor(Label2), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.25) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

ggsave("toxic_substances_by_continent.png", last_plot(), width = 20, height = 10, units = "cm", limitsize = F)

toxicSubstances_df |> select(-Label) |> rename(Label = Label2) |> write_csv("toxic_substances_by_continent.csv")
```

# Heavy metals by continent

```{r}
all_df |> dplyr::filter(Colname %in% heavyMetals) -> heavyMetals_df

heavyMetals_df |> mutate(Label2 = as.integer(factor(Colname))) -> heavyMetals_df

heavyMetals_df |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> heavyMetals_df_levels

heavyMetals_df |> ggplot(aes(y = factor(Continent, levels = heavyMetals_df_levels), x = as.factor(Label2), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.2) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metals by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

# divide df into 2 parts

heavyMetals_df |> dplyr::filter(Label2 %in% 1:round(length(unique(heavyMetals_df$Label2))/2)) -> firstHalfHeavyMetals
heavyMetals_df |> dplyr::filter(Label2 %in% (round(length(unique(heavyMetals_df$Label2))/2)+1):length(unique(heavyMetals_df$Label2))) -> secondHalfHeavyMetals

firstHalfHeavyMetals |> ggplot(aes(y = factor(Continent, levels = heavyMetals_df_levels), x = as.factor(Label2), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.2) +
  ylab("Continent") +
  xlab("") +
  labs(fill = "", title = "Heavy metals by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top") -> pp1

secondHalfHeavyMetals |> ggplot(aes(y = factor(Continent, levels = heavyMetals_df_levels), x = as.factor(Label2), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.2) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none") -> pp2

gridExtra::grid.arrange(pp1, pp2, ncol = 1) -> heavyMetalsPlot

pp1 + pp2 + plot_layout(ncol = 1)

ggsave("heavy_metals_by_continent.png", heavyMetalsPlot, width = 25, height = 10, units = "cm", limitsize = F)

firstHalfHeavyMetals |> rbind(secondHalfHeavyMetals) |> select(-Label) |> rename(Label = Label2) |> write_csv("heavy_metals_by_continent.csv")

```

# Green house gases by continent

```{r}
all_df |> dplyr::filter(Colname %in% greenHouseGases) -> greenHouseGases_df

greenHouseGases_df |> mutate(Label2 = as.integer(factor(Colname))) -> greenHouseGases_df

greenHouseGases_df |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> greenHouseGases_df_levels

greenHouseGases_df |> ggplot(aes(y = factor(Continent, levels = greenHouseGases_df_levels), x = as.factor(Label2), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Green house gases by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

ggsave("green_house_gases_by_continent.png", last_plot(), width = 25, height = 10, units = "cm", limitsize = F)

greenHouseGases_df |> select(-Label) |> rename(Label = Label2) |> write_csv("green_house_gases_by_continent.csv")

greenHouseGases_df[str_detect("|air", rownames(greenHouseGases_df)),] -> greenHouseGases_df_air

greenHouseGases_df_air |> ggplot(aes(y = factor(Continent, levels = greenHouseGases_df_levels), x = as.factor(Label2), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Green house gases by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")
```

# Compartments plots by continent

```{r}
#Water data

water.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsWaterData
bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents
continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest
continentsWaterDataPlotDF <- data.frame()

for (continent in continents_of_interest) {
  continentsWaterData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsWaterDataPlotDF <- rbind(continentsWaterDataPlotDF, df)
}
continentsWaterDataPlotDF |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> factorLevelsWaterData

continentsWaterDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsWaterDataPlotDF

# divide vector into 2 equal parts by Colname
continentsWaterDataPlotDF$Colname |> unique() -> uniqueColnamesWaterData

uniqueColnamesWaterData[1:round(length(uniqueColnamesWaterData)/2)] -> firstHalfWaterDataColnames
uniqueColnamesWaterData[(round(length(uniqueColnamesWaterData)/2)+1):length(uniqueColnamesWaterData)] -> secondHalfWaterDataColnames

continentsWaterDataPlotDF1 <- continentsWaterDataPlotDF |> dplyr::filter(Colname %in% firstHalfWaterDataColnames)
continentsWaterDataPlotDF2 <- continentsWaterDataPlotDF |> dplyr::filter(Colname %in% secondHalfWaterDataColnames)

continentsWaterDataPlotDF1 |> ggplot(aes(y = factor(Continent, levels = factorLevelsWaterData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("") +
  labs(fill = "", title = "Water columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4),axis.text.y = element_text(size = 4, hjust = 1)) -> firstWaterPlot

continentsWaterDataPlotDF2 |> ggplot(aes(y = factor(Continent, levels = factorLevelsWaterData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none", axis.text.x = element_text(size = 4),axis.text.y = element_text(size = 4, hjust = 1)) -> secondWaterPlot

gridExtra::grid.arrange(firstWaterPlot, secondWaterPlot, ncol = 1) -> waterPlot

firstWaterPlot + secondWaterPlot + plot_layout(ncol = 1)

ggsave("water_by_continent.pdf", waterPlot, width = 25, height = 6, units = "cm", limitsize = T)

continentsWaterDataPlotDF |> write_csv("water_by_continent.csv")

```

```{r}
# Do the same for air data

air.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsAirData
bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents
continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest
continentsAirDataPlotDF <- data.frame()

for (continent in continents_of_interest) {
  continentsAirData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsAirDataPlotDF <- rbind(continentsAirDataPlotDF, df)
}

continentsAirDataPlotDF |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> factorLevelsAirData

continentsAirDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsAirDataPlotDF

# divide vector into 2 equal parts by Colname

uniqueColnamesAirData <- continentsAirDataPlotDF$Colname |> unique()

uniqueColnamesAirData[1:round(length(uniqueColnamesAirData)/2)] -> firstHalfAirDataColnames

uniqueColnamesAirData[(round(length(uniqueColnamesAirData)/2)+1):length(uniqueColnamesAirData)] -> secondHalfAirDataColnames

continentsAirDataPlotDF1 <- continentsAirDataPlotDF |> dplyr::filter(Colname %in% firstHalfAirDataColnames)
continentsAirDataPlotDF2 <- continentsAirDataPlotDF |> dplyr::filter(Colname %in% secondHalfAirDataColnames)

continentsAirDataPlotDF1 |> ggplot(aes(y = factor(Continent, levels = factorLevelsAirData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("") +
  labs(fill = "", title = "Air columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4),axis.text.y = element_text(size = 4, hjust = 1)) -> firstAirPlot

continentsAirDataPlotDF2 |> ggplot(aes(y = factor(Continent, levels = factorLevelsAirData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none", axis.text.x = element_text(size = 4),axis.text.y = element_text(size = 4, hjust = 1)) -> secondAirPlot

gridExtra::grid.arrange(firstAirPlot, secondAirPlot, ncol = 1) -> airPlot

firstAirPlot + secondAirPlot + plot_layout(ncol = 1)

ggsave("air_by_continent.pdf", airPlot, width = 20, height = 10, units = "cm", limitsize = T)

continentsAirDataPlotDF |> write_csv("air_by_continent.csv")
```

```{r}
# Do the same for soil data

soil.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsSoilData
bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents
continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest
continentsSoilDataPlotDF <- data.frame()

for (continent in continents_of_interest) {
  continentsSoilData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsSoilDataPlotDF <- rbind(continentsSoilDataPlotDF, df)
}

continentsSoilDataPlotDF |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> factorLevelsSoilData

continentsSoilDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsSoilDataPlotDF

# divide vector into 2 equal parts by Colname

uniqueColnamesSoilData <- continentsSoilDataPlotDF$Colname |> unique()

uniqueColnamesSoilData[1:round(length(uniqueColnamesSoilData)/2)] -> firstHalfSoilDataColnames

uniqueColnamesSoilData[(round(length(uniqueColnamesSoilData)/2)+1):length(uniqueColnamesSoilData)] -> secondHalfSoilDataColnames

continentsSoilDataPlotDF1 <- continentsSoilDataPlotDF |> dplyr::filter(Colname %in% firstHalfSoilDataColnames)
continentsSoilDataPlotDF2 <- continentsSoilDataPlotDF |> dplyr::filter(Colname %in% secondHalfSoilDataColnames)

continentsSoilDataPlotDF |> ggplot(aes(y = factor(Continent, levels = factorLevelsSoilData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Soil columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4),axis.text.y = element_text(size = 4, hjust = 1)) -> soilPlot

ggsave("soil_by_continent.pdf", soilPlot, width = 17.5, height = 4, units = "cm", limitsize = T)
 
continentsSoilDataPlotDF |> write_csv("soil_by_continent.csv")
```

```{r}
# Do same for natural resources data

natural.resource.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsNaturalResourcesData

bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents

continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest

continentsNaturalResourcesDataPlotDF <- data.frame()

for (continent in continents_of_interest) {
  continentsNaturalResourcesData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsNaturalResourcesDataPlotDF <- rbind(continentsNaturalResourcesDataPlotDF, df)
}

continentsNaturalResourcesDataPlotDF |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> factorLevelsNaturalResourcesData

continentsNaturalResourcesDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsNaturalResourcesDataPlotDF

continentsNaturalResourcesDataPlotDF |> 
  ggplot(aes(y = factor(Continent, levels = factorLevelsNaturalResourcesData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Natural resources columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4),axis.text.y = element_text(size = 4, hjust = 1)) -> naturalResourcesPlot

ggsave("natural_resources_by_continent.pdf", naturalResourcesPlot, width = 17.5, height = 4, units = "cm", limitsize = T)

continentsNaturalResourcesDataPlotDF |> write_csv("natural_resources_by_continent.csv")
```

```{r}
```

# Europe all data combined

```{r}
bigDataCountriesGrouped |> dplyr::filter(Continent == "Europe") |> benford_conforming_combined2() -> benford_ecoinvent_EUROPE
```

# Asia all data combined

```{r}
bigDataCountriesGrouped |> dplyr::filter(Continent == "Asia") |> benford_conforming_combined2() -> benford_ecoinvent_ASIA

```

### Australia all data combined

```{r}
bigDataCountriesGrouped |> dplyr::filter(Country == "AU") |> benford_conforming_combined2() -> benford_ecoinvent_AUSTRALIA
bigDataCountriesGrouped |> dplyr::filter(Continent == "Australia/Oceania") |> benford_conforming_combined2() -> benford_ecoinvent_AUSTRALIA_OCEANIA
```

```{r}
bigDataCountriesGrouped |> dplyr::filter(Continent == "Africa") |> benford_conforming_combined2() -> benford_ecoinvent_AFRICA
bigDataCountriesGrouped |> dplyr::filter(Continent == "North America") |> benford_conforming_combined2() -> benford_ecoinvent_N_AMERICA
bigDataCountriesGrouped |> dplyr::filter(Continent == "South America") |> benford_conforming_combined2() -> benford_ecoinvent_S_AMERICA
```

# Combined data for each continent

```{r}
EuropeData |> benford_conforming() -> EuropeBenfordVec
AsiaData |> benford_conforming() -> AsiaBenfordVec
NorthAmericaData |> benford_conforming() -> NorthAmericaBenfordVec
SouthAmericaData |> benford_conforming() -> SouthAmericaBenfordVec
AfricaData |> benford_conforming() -> AfricaBenfordVec
AustraliaOceaniaData |> benford_conforming() -> AustraliaOceaniaBenfordVec

EuropeBenfordVec |> length()
```

```{r}
# EuropeBenfordVec |> benfordPlot("Europe")
# AsiaBenfordVec |> benfordPlot("Asia")
# NorthAmericaBenfordVec |> benfordPlot("North America")
# SouthAmericaBenfordVec |> benfordPlot("South America")
# AfricaBenfordVec |> benfordPlot("Africa")
# AustraliaOceaniaBenfordVec |> benfordPlot("Australia/Oceania")
benford_ecoinvent_EUROPE |> benfordPlot("Europe")
benford_ecoinvent_ASIA |> benfordPlot("Asia")
benford_ecoinvent_N_AMERICA |> benfordPlot("North America")
benford_ecoinvent_S_AMERICA |> benfordPlot("South America")
benford_ecoinvent_AFRICA |> benfordPlot("Africa")
benford_ecoinvent_AUSTRALIA_OCEANIA |> benfordPlot("Australia/Oceania")
```


```{r}
# AustraliaOceaniaData |> mutate_if(is.numeric, first_digit) |> benford_conforming_combined() -> AustraliaOceaniaBenfordVecFirstDigit
# 
# AustraliaOceaniaBenfordVecFirstDigit |> benfordPlot("Australia/Oceania") 
# 
# 
# AustraliaOceaniaBenfordVec |> plot()
# 
# AustraliaOceaniaData |> benford_conforming_combined2(2)
# 
# benford_conforming_combined <- function(data, n = 1) {
#     # Select and filter numeric columns, removing columns with all zeros
#     numeric_columns <- data[, data |> sapply(is.numeric)]
#     #numeric_columns <- numeric_columns[, colSums(numeric_columns) != 0]
# 
#     # Check if we have any numeric columns left
#     if (ncol(numeric_columns) == 0) { 
#       return("No numeric columns with positive values found")
#     }
# 
#     # Combine numeric columns with positive values
#     combined_column <- do.call(c, numeric_columns) 
# 
#     # Remove any potential 0 values (these can interfere with Benford)
#     combined_column <- combined_column[combined_column != 0]
# 
#     # Perform Benford analysis
#     result <- benford(combined_column, number.of.digits = n)
# 
#     return(result)
# }
# 
# (unlist(AustraliaOceaniaData[sapply(AustraliaOceaniaData, is.numeric)], use.names = FALSE)) |> benford::benford(plot = T, mode = 1)


```

```{r}
```

# All Ecoinvent data together

```{r}
bigDataCountriesGrouped |> benford_conforming_combined() -> benford_ecoinvent_all

```

# Other datasets

## World steel dataset

### All data

```{r}
library(benford.analysis)



worldsteel_2020 <- read_delim("worldsteel_2020.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 113)

worldsteel_2020 |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_worldsteel_all


```

### Asia data

```{r}
worldsteel_2020_Asia_all <- read_delim("worldsteel_2020_Asia_all.csv", 
     delim = ";", escape_double = FALSE, col_names = FALSE, 
     trim_ws = TRUE, skip = 112)

worldsteel_2020_Asia_all |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_worldsteel_ASIA

```

### Europe data

```{r}
worldsteel_EUROPE <- read_delim("worldsteel_EUROPE.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 110)

worldsteel_EUROPE |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_worldsteel_EUROPE
```

### Global data

```{r}
worldsteel_2020_GLO_all <- read_delim("worldsteel_2020_GLO_all.csv", 
     delim = ";", escape_double = FALSE, col_names = FALSE, 
     trim_ws = TRUE, skip = 110)
worldsteel_2020_GLO_all |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_worldsteel_GLO
```

## OzLCI2019

### All data

```{r}
OzLCI2019 <- read_delim("OzLCI2019.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 97)

OzLCI2019 |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_OzLCI2019_all
```

## Australia data

```{r}
OzLCI2019_AUSTRALIA <- read_delim("OzLCI2019_AUSTRALIA.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 97)
OzLCI2019_AUSTRALIA |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_OzLCI2019_AUSTRALIA

```

### All data

```{r}
elcd_3_2_greendelta_v2_18_correction_20220908 <- read_delim("elcd_3_2_greendelta_v2_18_correction_20220908.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 112)

elcd_3_2_greendelta_v2_18_correction_20220908 |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_elcd_3_2_greendelta_v2_18_correction_20220908_all
```

### Europe data

```{r}
greendelta_EUROPE <- read_delim("greendelta_EUROPE.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 111)

greendelta_EUROPE |> dplyr::filter(X5 == "Undefined") -> data
data |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_greendelta_EUROPE
```

## needs_18

### All data

```{r}
needs_18 <- read_delim("needs_18(1).csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 98)

needs_18 |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_needs_18_all
```

### Europe data

```{r}
needs_EUROPE <- read_delim("needs_EUROPE.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
    trim_ws = TRUE, skip = 100)

needs_EUROPE |> dplyr::filter(X5 == "Undefined") |> select(X4) |> mutate(X4 = as.numeric(X4)) |> na.omit() |> mutate(X4 = first_digit(X4)) |> pull() |> benford(number.of.digits = 1) -> benford_needs_EUROPE

```

## bioenergiedat_18

### All data

```{r}
bioenergiedat_18 <- read_delim("bioenergiedat_18.csv", 
    delim = ";", escape_double = FALSE, col_names = FALSE, 
     trim_ws = TRUE, skip = 100)

bioenergiedat_18 |> dplyr::filter(X4 == "Undefined") |> select(X3) |> mutate(X3 = as.numeric(X3)) |> na.omit() |> mutate(X3 = first_digit(X3)) |> pull() |> benford(number.of.digits = 1) -> benford_bioenergiedat_18_all


```

## Plots

```{r}

benfordPlot(benford_worldsteel_all, "worldsteel database",suspectTreshold = 0.01) -> p2
benfordPlot(benford_OzLCI2019_all, "OzLCI2019 database",suspectTreshold = 0.01) -> p3
benfordPlot(benford_elcd_3_2_greendelta_v2_18_correction_20220908_all, "Environmental Footprint database", suspectTreshold = 0.01) -> p4
benfordPlot(benford_needs_18_all, "needs database",suspectTreshold = 0.01) -> p5
(benfordPlot(benford_bioenergiedat_18_all, "bioenergiedat database", suspectTreshold = 0.01) -> p6)
benfordPlot(benford_ecoinvent_all, "ecoinvent database",suspectTreshold = 0.01) -> p1

#gridExtra::grid.arrange(p1, p2, p3, p4, p5, ncol = 2, layout_matrix = rbind(c(1, 2), c(3, 4), c(5))) -> allPlots
```

```{r}
get_legend <- function(myggplot) {
  tmp <- ggplot_gtable(ggplot_build(myggplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}
p6 + guides(color = "none") -> p6

p6 <- p6 + labs(color = "", fill = "Suspect (absolute difference between observed and expected > 1%)") + theme(
    legend.text = element_text(size = 10),    # Adjust legend text size
    legend.title = element_text(size = 12),   # Adjust legend title size
    legend.position = "bottom",                 # Position the legend at the top
    legend.box = "horizontal",               # Arrange legend items horizontally
    legend.spacing.x = unit(0.3, "cm")) +
    guides(color = "none")
    
legend <- get_legend(p6)  # Extract legend from p6


# Remove legends from each plot
p1 <- p1 + theme(legend.position = "none")
p2 <- p2 + theme(legend.position = "none")
p3 <- p3 + theme(legend.position = "none")
p4 <- p4 + theme(legend.position = "none")
p5 <- p5 + theme(legend.position = "none")
p6 <- p6 + theme(legend.position = "none")



# Combine the plots and the legend
allPlots <- gridExtra::grid.arrange(
  legend,  # Place the legend at the top
  gridExtra::arrangeGrob(p1, p2, p3, p4, p5, p6, ncol = 2, layout_matrix = rbind(c(1, 2), c(3, 4), c(5, 6))),
  nrow = 2, heights = c(1, 10)  # Adjust heights to make the legend smaller and place it at the top
)


```

```{r}

ggsave(allPlots, file = "allDataComparison.png", width = 20, height = 28, units = "cm")
```

```{r}
benfordPlot(benford_worldsteel_EUROPE, "Worldsteel") -> p1_EU
benfordPlot(benford_greendelta_EUROPE, "Greendelta") -> p2_EU
benfordPlot(benford_needs_EUROPE, "Needs") -> p3_EU
benfordPlot(benford_ecoinvent_EUROPE, "Ecoinvent") -> p4_EU

gridExtra::grid.arrange(p1_EU, p2_EU, p3_EU, p4_EU, ncol = 2, top = "Europe data comparison") -> allPlots_EU

ggsave(allPlots_EU, file = "EuropeComparisonPlot.png", width = 20, height = 20, units = "cm")

```

```{r}
benfordPlot(benford_worldsteel_ASIA, "Worldsteel") -> p1_ASIA
benfordPlot(benford_ecoinvent_ASIA, "Ecoinvent") -> p2_ASIA

gridExtra::grid.arrange(p1_ASIA, p2_ASIA, ncol = 2, top = "Asia data comparison") -> allPlots_ASIA 

ggsave(allPlots_ASIA, file = "AsiaComparisonPlot.png", width = 20, height = 10, units = "cm")
```

```{r}

benfordPlot(benford_OzLCI2019_AUSTRALIA, "OzLCI2019") -> p1_AU
benfordPlot(benford_ecoinvent_AUSTRALIA, "Ecoinvent") -> p2_AU

gridExtra::grid.arrange(p1_AU, p2_AU, ncol = 2, top = "Australia data comparison") -> allPlots_AU

ggsave(allPlots_AU, file = "AustraliaComparisonPlot.png", width = 20, height = 10, units = "cm")
```

```{r}
benfordPlot(benford_ecoinvent_EUROPE, "Europe") -> EUROPE
benfordPlot(benford_ecoinvent_ASIA, "Asia") -> ASIA
benfordPlot(benford_ecoinvent_N_AMERICA, "North America") -> NAMERICA
benfordPlot(benford_ecoinvent_S_AMERICA, "South America") -> SAMERICA
benfordPlot(benford_ecoinvent_AFRICA, "Africa") -> AFRICA
benfordPlot(benford_ecoinvent_AUSTRALIA_OCEANIA, "Australia/Oceania") -> AUSTRALIA

gridExtra::grid.arrange(EUROPE, ASIA, NAMERICA, SAMERICA, AFRICA, AUSTRALIA, ncol = 2, top = "Continent comparison Ecoinvent") -> allPlots_continent

ggsave(allPlots_continent, file = "ContinentComparisonPlot.png", width = 20, height = 28, units = "cm")
```

# Dataframe for continents Benford stats

```{r}
addToStatsDF <- function(StatsDF, benfordVec,Continent, Database) {
  # Extracting statistical measures from the benfordVec object
  chisq_x_squared <- benfordVec$stats$chisq$statistic
  chisq_p_value <- benfordVec$stats$chisq$p.value
  mantissa_arc_test_statistic <- benfordVec$stats$mantissa.arc.test$statistic
  mantissa_arc_test_p_value <- benfordVec$stats$mantissa.arc.test$p.value
  MAD_conformity <- benfordVec$MAD.conformity
  MAD <- benfordVec$MAD
  n <- benfordVec$info$n
  
  # Creating a new row with the extracted data
  newRow <- data.frame(Continent = Continent,
                       Database = Database,
                       ChiSq = chisq_x_squared, 
                       ChiSqP = chisq_p_value, 
                       MantissaArcTest = mantissa_arc_test_statistic, 
                       MantissaArcTestP = mantissa_arc_test_p_value, 
                       MADConformity = MAD_conformity, 
                       MAD = MAD, 
                       NumberOfObservations = n)
  
  # Adding the new row to the continentsStatsDF data frame
  updatedDF <- rbind(StatsDF, newRow)
  # Remove row names
  rownames(updatedDF) <- NULL
  # Return the updated data frame
  return(updatedDF)
}
```

```{r}
continentsStatsDF <- data.frame()

addToStatsDF(continentsStatsDF, benford_ecoinvent_EUROPE, "Europe", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_ASIA, "Asia", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_N_AMERICA, "North America", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_S_AMERICA, "South America", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_AFRICA, "Africa", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_AUSTRALIA_OCEANIA, "Australia/Oceania", "Ecoinvent") -> continentsStatsDF
```

```{r}
EuropeAllDBStatsDF <- data.frame()
addToStatsDF(EuropeAllDBStatsDF, benford_worldsteel_EUROPE,"Europe","Worldsteel") -> EuropeAllDBStatsDF
addToStatsDF(EuropeAllDBStatsDF, benford_greendelta_EUROPE,"Europe","Greendelta") -> EuropeAllDBStatsDF
addToStatsDF(EuropeAllDBStatsDF, benford_needs_EUROPE,"Europe", "Needs") -> EuropeAllDBStatsDF
addToStatsDF(EuropeAllDBStatsDF, benford_ecoinvent_EUROPE,"Europe", "Ecoinvent") -> EuropeAllDBStatsDF
```

```{r}
AsiaAllDBStatsDF <- data.frame()
addToStatsDF(AsiaAllDBStatsDF, benford_worldsteel_ASIA, "Asia", "Worldsteel") -> AsiaAllDBStatsDF
addToStatsDF(AsiaAllDBStatsDF, benford_ecoinvent_ASIA, "Asia", "Ecoinvent") -> AsiaAllDBStatsDF
```

```{r}
AustraliaAllDBStatsDF <- data.frame()
addToStatsDF(AustraliaAllDBStatsDF, benford_OzLCI2019_AUSTRALIA, "Australia", "OzLCI2019") -> AustraliaAllDBStatsDF
addToStatsDF(AustraliaAllDBStatsDF, benford_ecoinvent_AUSTRALIA, "Australia", "Ecoinvent") -> AustraliaAllDBStatsDF
```

```{r}
ComparisonBetweenDBStatsDF <- data.frame()
rbind(EuropeAllDBStatsDF, AsiaAllDBStatsDF, AustraliaAllDBStatsDF) -> ComparisonBetweenDBStatsDF
```

```{r}
allDfAllDataStatsDF <- data.frame()
addToStatsDF(allDfAllDataStatsDF, benford_worldsteel_all,"All", "Worldsteel") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_OzLCI2019_all,"All", "OzLCI2019") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_elcd_3_2_greendelta_v2_18_correction_20220908_all,"All", "Greendelta") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_needs_18_all,"All", "Needs") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_bioenergiedat_18_all,"All", "Bioenergiedat") -> allDfAllDataStatsDF
```

```{r}
write.csv(continentsStatsDF, "continentsStatsDF.csv")
write.csv(ComparisonBetweenDBStatsDF, "ComparisonBetweenDBStatsDF.csv")
write.csv(allDfAllDataStatsDF, "allDfAllDataStatsDF.csv")
```

# Benford stats for all columns of Ecoinvent

```{r}
# Do benford on each numeric column and then run addToStatsDF

benford_stats <- function(data, ecoinvendStatsDF) {
  # Select and filter numeric columns, removing columns with all zeros
  numeric_columns <- select_if(data, is.numeric)
  #numeric_columns <- numeric_columns[, colSums(numeric_columns) != 0]

  # Check if we have any numeric columns left
  if (ncol(numeric_columns) == 0) { 
    return("No numeric columns with positive values found")
  }
  for(col in 1:ncol(numeric_columns)) {
    benford(numeric_columns[col] |> pull() |> as.numeric(), number.of.digits = 1, sign = "both") -> benfordVec
    addToStatsDF(ecoinvendStatsDF, benfordVec, "Ecoinvent", colnames(numeric_columns[col])) -> ecoinvendStatsDF
  }
  
  return(ecoinvendStatsDF)
}
ecoinvendStatsDF <- data.frame()
bigDataCountriesGrouped |> benford_stats(ecoinvendStatsDF) -> ecoinvendStatsDF

ecoinvendStatsDF
#change colnames of first 2 columns

colnames(ecoinvendStatsDF)[c(1,2)] <- c("Database","Column")
```

```{r}

write.csv(ecoinvendStatsDF, "ecoinvendStatsDF.csv")
```

```{r}
# ecoinvendStatsDF <- data.frame()
# #bigData |> select(-6) -> bigData
# bigData |> benford_stats(ecoinvendStatsDF) -> ecoinvendStatsDF
# 
# ecoinvendStatsDF |> write.csv("ecoinvendStatsDF.csv")

ecoinvendStatsDF |> dplyr::filter(MADConformity == "Acceptable conformity" & NumberOfObservations > 100)
# Stacked barplot where all conforming columns are accumulated in 1 bar and another is for nonconforming columns
ecoinvendStatsDF |> mutate(MADConformity = ifelse(NumberOfObservations > 100, MADConformity, "Not suitable data"))

ecoinvendStatsDF |> mutate(MADConformity = ifelse(NumberOfObservations > 100, MADConformity, "Not suitable data")) |> pull(MADConformity) |> table() |> as.data.frame() -> MADConformityTable

MADConformityTable[c(2,1,3,5,4),] -> MADConformityTable

MADConformityTable |> mutate(Category = ifelse(Var1 %in% c("Nonconformity","Not suitable data"), "Nonconforming", "Conforming")) -> MADConformityTable

MADConformityTable |> ggplot(aes(x = Category, y = Freq, fill = Var1)) +
  geom_bar(stat = "identity",color = "black") +
  theme_bw() +
  theme(plot.title = element_text(size = 12, hjust = 0.5), legend.text = element_text(size = 7),    # Adjust legend text size
    legend.title = element_text(size = 8),   # Adjust legend title size
    legend.position = "right",                 # Position the legend at the top             # Arrange legend items horizontally
    legend.spacing.x = unit(0.2, "cm")) +
  scale_fill_manual(values = conformityColors) +
  labs(title = "Conformity of Ecoinvent columns", x = "Conformity", y = "Number of columns", fill = "")

ggsave("ecoinvent_conformity.png", width = 14, height = 10, units = "cm")




```

```{r}
library(dplyr)
library(ggplot2)

# Stacked barplot where all conforming columns are accumulated in 1 bar and another is for nonconforming columns
ecoinvendStatsDF %>%
  mutate(MADConformity = ifelse(NumberOfObservations > 100, MADConformity, "Not suitable data"))

MADConformityTable <- ecoinvendStatsDF |> 
  mutate(MADConformity = ifelse(NumberOfObservations > 100, MADConformity, "Not suitable data")) |> pull(MADConformity) |> table() |> 
  as.data.frame()

# Define the order of levels
level_order <- c("Not suitable data", "Nonconformity", "Marginally acceptable conformity", "Acceptable conformity", "Close conformity") |> rev()

MADConformityTable <- MADConformityTable %>%
  mutate(Var1 = factor(Var1, levels = level_order))

MADConformityTable |> mutate(Category = ifelse(Var1 %in% c("Nonconformity","Not suitable data"), "Nonconforming", "Conforming")) -> MADConformityTable
# Define the colors for each level
conformityColors <- c("Not suitable data" = "pink", 
                      "Nonconformity" = "purple", 
                      "Marginally acceptable conformity" = "lightblue", 
                      "Acceptable conformity" = "blue", 
                      "Close conformity" = "darkblue")

ggplot(MADConformityTable, aes(x = Category, y = Freq, fill = Var1)) +
  geom_bar(stat = "identity", color = "black") +
  theme_bw() +
  theme(plot.title = element_text(size = 12, hjust = 0.5), 
        legend.text = element_text(size = 7),
        legend.title = element_text(size = 8), 
        legend.position = "right",
        legend.spacing.x = unit(0.2, "cm")) +
  scale_fill_manual(values = conformityColors, breaks = level_order, limits = level_order) +
  labs(title = "Conformity of Ecoinvent columns", 
       x = "Conformity", 
       y = "Number of columns", 
       fill = "")

  ggsave("ecoinvent_conformity.png", width = 14, height = 10, units = "cm")

```

# Tables for paper

```{r}
read.csv("allDfAllDataStatsDF.csv") |> select(-X, -Continent) |> mutate_if(is.numeric, round, 3) -> table1.data

colnames(table1.data)[8] <- "N"
colnames(table1.data)[4] <- "MantTest"
colnames(table1.data)[5] <- "MantP"
colnames(table1.data)[6] <- "MADConf"

table1.data |> write.csv("table1.data.csv")
```

```{r}
ecoinvendStatsDF |> select(Column, MADConformity, NumberOfObservations) |> dplyr::filter(NumberOfObservations > 100) -> conformity.data.ecoinvent

ifelse(conformity.data.ecoinvent$MADConformity == "Nonconformity", "Nonconformity", "Conformity") |> table()

71 / 2193 * 100

conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|air\\|"),"MADConformity"] |> table()

18/conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|air\\|"),"MADConformity"] |> table() |> sum() * 100

conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|water\\|"),"MADConformity"] |> table()

27/conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|water\\|"),"MADConformity"] |> table() |> sum() * 100


conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|soil\\|"),"MADConformity"] |> table()
15 / conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|soil\\|"),"MADConformity"] |> table() |> sum() * 100

conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|natural resource\\|"),"MADConformity"] |> table()

11 / conformity.data.ecoinvent[str_detect(conformity.data.ecoinvent$Column, "\\|natural resource\\|"),"MADConformity"] |> table() |> sum() *100

str_detect(conformity.data.ecoinvent$Column, "\\|air\\|")
str_detect(ecoinvendStatsDF$Column, "air")
```

# Correlation between Benford and EPI score

```{r}
europe_df |> head()

read.csv("continentsStatsDF.csv", sep = ";") -> continentsStatsDF

EPI_data <- read_excel("2022-epi.xlsx", 
    sheet = "3_EPI_Results")

EPI_data

sapply(EPI_data$iso, get_continent)

EPI_data$iso 

get_continent3letters <- function(country_codes) {
  continent <- countrycode(country_codes, origin = 'iso3c', destination = 'continent')
  return(continent)
}

get_continent3letters(EPI_data$iso) -> EPI_data$continent

EPI_data |> select(country, iso, region, EPI.new,AIR.new,H2O.new,WRS.new,WMG.new,HMT.new, AGR.new ,continent) -> EPI_data

EPI_data |> dplyr::filter(continent == "Europe") |> pull(EPI.new) |> mean() -> mean_EPI_europe

EPI_data |> dplyr::filter(continent == "Asia") |> pull(EPI.new) |> mean() -> mean_EPI_asia

EPI_data |> dplyr::filter(continent == "Africa") |> pull(EPI.new) |> mean() -> mean_EPI_africa


```

```{r}
get_country_name <- function(iso2_codes) {
  country_names <- countrycode(iso2_codes, origin = 'iso2c', destination = 'country.name')
  return(country_names)
}

bigDataCountriesGrouped |> select(Country,Continent) |> dplyr::filter(Continent == "North America") |> unique() |> dplyr::filter(length(Country) == 2)

bigDataCountriesGrouped |> select(Country,Continent) |> dplyr::filter(Continent == "North America") |> unique() |> dplyr::filter(str_length(Country) == 2)|> pull(Country) |> get_country_name() -> northAmericaCountries

bigDataCountriesGrouped |> select(Country,Continent) |> dplyr::filter(Continent == "South America") |> unique() |> dplyr::filter(str_length(Country) == 2)|> pull(Country) |> get_country_name() -> southAmericaCountries

bigDataCountriesGrouped |> select(Country,Continent) |> dplyr::filter(Continent == "Europe") |> unique() |> dplyr::filter(str_length(Country) == 2)|> pull(Country) |> get_country_name() -> europeCountries

bigDataCountriesGrouped |> select(Country,Continent) |> dplyr::filter(Continent == "Asia") |> unique() |> dplyr::filter(str_length(Country) == 2)|> pull(Country) |> get_country_name() -> asiaCountries

bigDataCountriesGrouped |> select(Country,Continent) |> dplyr::filter(Continent == "Africa") |> unique() |> dplyr::filter(str_length(Country) == 2)|> pull(Country) |> get_country_name() -> africaCountries



bigDataCountriesGrouped |> select(Country,Continent) |> dplyr::filter(Continent == "Australia/Oceania") |> unique() |> dplyr::filter(str_length(Country) == 2)|> pull(Country) |> get_country_name() -> australiaCountries

EPI_data[EPI_data$country %in% northAmericaCountries,]$continent <- "North America"

EPI_data[EPI_data$country %in% southAmericaCountries,]$continent <- "South America"

EPI_data[EPI_data$country %in% australiaCountries,]$continent <- "Australia/Oceania"

EPI_data |> dplyr::filter(continent == "South America") |> pull(EPI.new) |> mean() -> mean_EPI_south_america

EPI_data |> dplyr::filter(continent == "North America") |> pull(EPI.new) |> mean() -> mean_EPI_north_america

EPI_data |> dplyr::filter(continent == "Australia/Oceania") |> pull(EPI.new) |> mean() -> mean_EPI_australia_oceania

# Calculate means of all columns for each continent
EPIDataMeans <- EPI_data |> select(EPI.new, AIR.new, H2O.new, WRS.new, WMG.new, HMT.new, AGR.new, continent) |> group_by(continent) |> summarise(AIR = mean(AIR.new), H2O = mean(H2O.new), WRS = mean(as.numeric(WRS.new), na.rm = F), WMG = mean(WMG.new), HMT = mean(HMT.new), AGR = mean(AGR.new))

```

```{r}
continentsStatsDF |> select(Continent, MAD) -> continentsMAD

#continentsMAD$EPI <- c(mean_EPI_europe, mean_EPI_asia, mean_EPI_north_america, mean_EPI_south_america, mean_EPI_africa, mean_EPI_australia_oceania)

#cor(continentsMAD$EPI, continentsMAD$MAD)

europe_df <- europe_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

europe_df$points |> sum() -> europeBenfordPoints

asia_df <- asia_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

asia_df$points |> sum() -> asiaBenfordPoints

africa_df <- africa_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

africa_df$points |> sum() -> africaBenfordPoints

north_america_df <- north_america_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

north_america_df$points |> sum() -> northAmericafBenfordPoints

south_america_df <- south_america_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

south_america_df$points |> sum() -> southAmericafBenfordPoints

asia_df |> group_by(Conformity) |> reframe(Count = n(), Percentage = n()/nrow(asia_df) * 100) |> write.csv("asiaBenford.csv")

europe_df |> group_by(Conformity) |> reframe(Count = n(), Percentage = n()/nrow(europe_df) * 100)|> write.csv("europeBenford.csv")

africa_df |> group_by(Conformity) |> reframe(Count = n(), Percentage = n()/nrow(africa_df) * 100) |> write.csv("africaBenford.csv")

south_america_df |> group_by(Conformity) |> reframe(Count = n(), Percentage = n()/nrow(south_america_df) * 100) |> write.csv("southAmericaBenford.csv")

north_america_df |> group_by(Conformity) |> reframe(Count = n(), Percentage = n()/nrow(north_america_df) * 100) |> write.csv("northAmericaBenford.csv")
```

```{r}
heavyMetals_df <- heavyMetals_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

heavy_metals_europe <- heavyMetals_df |> dplyr::filter(Continent == "Europe")
heavy_metals_asia <- heavyMetals_df |> dplyr::filter(Continent == "Asia")
heavy_metals_north_america <- heavyMetals_df |> dplyr::filter(Continent == "North America")
heavy_metals_south_america <- heavyMetals_df |> dplyr::filter(Continent == "South America")
heavy_metals_africa <- heavyMetals_df |> dplyr::filter(Continent == "Africa")

heavy_metals_europe$points |> sum() -> europeHeavyMetalsBenfordPoints
heavy_metals_asia$points |> sum() -> asiaHeavyMetalsBenfordPoints
heavy_metals_north_america$points |> sum() -> northAmericaHeavyMetalsBenfordPoints
heavy_metals_south_america$points |> sum() -> southAmericaHeavyMetalsBenfordPoints
heavy_metals_africa$points |> sum() -> africaHeavyMetalsBenfordPoints

continentsMAD$BenfordPoints <- c(europeBenfordPoints,asiaBenfordPoints, northAmericafBenfordPoints, southAmericafBenfordPoints, africaBenfordPoints, 0)

continentsMAD$HeavyMetalsBenfordPoints <- c(europeHeavyMetalsBenfordPoints, asiaHeavyMetalsBenfordPoints, northAmericaHeavyMetalsBenfordPoints, southAmericaHeavyMetalsBenfordPoints, africaHeavyMetalsBenfordPoints, 0)

continentsMAD[continentsMAD$Continent != "Australia/Oceania",-1] |> cor() |> ggcorrplot::ggcorrplot(type = "upper",lab = T)

continentsMAD |> inner_join(EPIDataMeans, by = c("Continent" = "continent")) -> continentsMAD
```

```{r}
carbonAtlas <- read_delim("carbonAtlas.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)

pivot_longer(carbonAtlas, cols = 1:ncol(carbonAtlas), names_to = "Country", values_to = "Carbon") -> carbonAtlas

get_continent_full_country_name <- function(country_names) {
  continent <- countrycode(country_names, origin = 'country.name', destination = 'continent')
  return(continent)
}

carbonAtlas$Country |> get_continent_full_country_name() -> carbonAtlas$Continent

carbonAtlas[carbonAtlas$Country %in% southAmericaCountries,]$Continent <- "South America"
carbonAtlas[carbonAtlas$Country %in% northAmericaCountries,]$Continent <- "North America"

carbonAtlas[carbonAtlas$Country %in% c(europeCountries,southAmericaCountries, northAmericaCountries, africaCountries, asiaCountries),] -> carbonAtlas

# carbonAtlas |> group_by(Continent) |> summarise(CarbonAtlasEmission = mean(Carbon, na.rm = T)) |> inner_join(continentsMAD, by = "Continent") -> continentsMAD
```

```{r}
continentsWaterDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsWaterDataPlotDF

continentsAirDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsAirDataPlotDF

continentsSoilDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsSoilDataPlotDF

continentsNaturalResourcesDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsNaturalResourcesDataPlotDF

continentsWaterDataPlotDF |> group_by(Continent) |> summarise(pointsWater = sum(points)) -> continentsWaterBenfordPoints

continentsAirDataPlotDF |> group_by(Continent) |> summarise(pointsAir = sum(points)) -> continentsAirBenfordPoints

continentsSoilDataPlotDF |> group_by(Continent) |> summarise(pointsSoil = sum(points)) -> continentsSoilBenfordPoints

continentsNaturalResourcesDataPlotDF |> group_by(Continent) |> summarise(pointsNaturalRes = sum(points)) -> continentsNaturalResourcesBenfordPoints

continentsMAD |> left_join(continentsWaterBenfordPoints, by = "Continent") |> left_join(continentsAirBenfordPoints, by = "Continent") |> left_join(continentsSoilBenfordPoints, by = "Continent") |> left_join(continentsNaturalResourcesBenfordPoints, by = "Continent") -> continentsMAD

correlationPlot <- continentsMAD[continentsMAD$Continent != "Australia/Oceania", -1] |>
  cor() |>
  ggcorrplot::ggcorrplot(type = "upper", lab = TRUE, 
             colors = c("#d01c8b", "white", "#4478c5"),
             outline.color = "black")

correlationPlot

correlationPlot |> ggsave(filename = "correlationPlot.pdf", width = 10, height = 10)


carbon_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) |> group_by(Continent) |> summarise(pointsCarbon = sum(points)) -> continentsCarbonBenfordPoints

carbonAtlas |> group_by(Continent) |> summarise(CarbonAtlasEmission = sum(Carbon, na.rm = T)) |> inner_join(continentsCarbonBenfordPoints, by = "Continent") |> select(-1) |> cor() |> ggcorrplot::ggcorrplot(type = "upper", lab = TRUE, 
             colors = c("#d01c8b", "white", "#4478c5"),
             outline.color = "black")
```
