---
title: "LCA newest"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

### Libraries

```{r warnings = FALSE}
library(stats)  # Base R statistical functions
library(tidyverse)  # Collection of R packages for data manipulation, visualization, and analysis
library(readxl)  # For reading Excel files
library(benford.analysis)  # For Benford's Law analysis
library(patchwork)  # For combining multiple ggplots
library(countrycode)  # For converting country codes and names

# Set a custom theme for all ggplots
theme_set(theme(
    plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 13), # Center-align title with space below it
    axis.text.x = element_text(size = 10, angle = 90, hjust = 1), # Rotate x-axis labels for better readability
    axis.text.y = element_text(size = 10), # Set y-axis text size
    axis.title.x = element_text(size = 12, margin = margin(t = 8)), # Customize x-axis title appearance
    axis.title.y = element_text(size = 12, angle = 90, margin = margin(r = 8)), # Customize y-axis title appearance
    legend.text = element_text(size = 10), # Set legend text size
    legend.title = element_text(size = 12), # Set legend title size
    legend.position = "bottom", # Place the legend below the plot
    legend.box = "horizontal", # Arrange legend items horizontally
    legend.spacing.x = unit(0.2, "cm"), # Add space between legend items
    panel.grid = element_blank(), # Remove grid lines from the plot
    panel.background = element_rect(fill = "black"), # Set the panel background color to black
    legend.key = element_rect(colour = "black", size = 0.6), # Customize legend key border
    plot.margin = margin(t = 0, r = 0.3, b = 0, l = 0) # Adjust plot margins (top, right, bottom, left)
))

# Define a custom color palette for conformity categories
conformityColors <- c(
    "Close conformity" = "#4478c5", # Blue for close conformity
    "Acceptable conformity" = "#7f9ec5", # Light blue for acceptable conformity
    "Marginally acceptable conformity" = "#c5b5df", # Purple for marginal conformity
    "Nonconformity" = "#fde5e1", # Light pink for nonconformity
    "Not suitable data" = "#f9cbe7" # Pink for unsuitable data
)
```

### Functions

```{r}
benford_conforming <- function(data, n = 1) {
  # Function to check conformity of numeric columns in a dataset to Benford's Law
  tryCatch({
    if (nrow(data) < 500) {
      return(c("Missing data" = "Unsuitable data"))  # Return if insufficient data rows
    }
    numeric_columns <- data |> dplyr::select_if(is.numeric)  # Select numeric columns

    if (ncol(numeric_columns) == 0) {
      return(c("No numeric columns" = "Unsuitable data"))  # Return if no numeric columns are found
    }

    # Apply Benford's Law to columns meeting conditions and retrieve conformity
    result <- sapply(numeric_columns, function(x) {
      if (mean(x, na.rm = TRUE) > median(x, na.rm = TRUE) & sum(x != 0, na.rm = TRUE) > 500) {
        res <- benford(x, number.of.digits = n, sign = "both")
        return(res$MAD.conformity)
      } else {
        return("Unsuitable data")
      }
    })

    # Ensure there is always a named vector to avoid issues with empty results
    if (length(result) == 0) {
      return(c("No suitable columns" = "Unsuitable data"))
    }

    return(result)
  }, error = function(e) {
    # Handle errors gracefully by returning a default response
    return(c("Error" = "Unsuitable data"))
  })
}


benford_conforming_stats <- function(data, n = 1) {
  # Function to return detailed Benford analysis results for numeric columns
  tryCatch({
    if (nrow(data) < 500) {
      return("Missing data")  # Return if insufficient data rows
    }
    numeric_columns <- data |> select_if(is.numeric)  # Select numeric columns

    if (numeric_columns |> length() == 0) {
      return("No numerical columns")  # Return if no numeric columns are found
    }
    
    numeric_columns |> ncol() -> num_of_numeric_cols  # Number of numeric columns
    # Apply Benford's Law to columns meeting conditions and return detailed results
    sapply(numeric_columns, function(x) {
      if (mean(x) > median(x) & sum(x != 0) > 500) {  # Check if column meets criteria
        benford(x, number.of.digits = n, sign = "both")
      } else {
        "Not suitable data"
      }
    }) -> result
    return(result)
  }, error = function(e) {
    # Handle errors gracefully
    return(NULL)
  })
}

benford_conforming_combined2 <- function(data, n = 1) {
  # Function to check conformity of all numeric values combined
  all.numeric.values <- unlist(data[sapply(data, is.numeric)], use.names = FALSE)  # Combine all numeric values
  if (sum(all.numeric.values == 0) < 500 | mean(all.numeric.values) < median(all.numeric.values)) {
    return("Not suitable data")  # Return if conditions are not met
  } else {
    return(benford(all.numeric.values, number.of.digits = n, sign = "both"))  # Apply Benford's Law
  }
}

first_digit <- function(number) {
  # Function to extract the first significant digit of a number
  number |> as.character() |> str_extract("[1-9]") |> as.numeric() -> result
  ifelse(!is.na(result), result, 0)  # Return 0 for non-numeric values
}

benfordPlot <- function(BObject, title, suspectTreshold = NULL) {
  # Function to create a Benford's Law plot
  suspectColor <- "#FF10F0"  # Color for suspect deviations
  nonSuspectColor <- "#1E90FF"  # Color for non-suspect deviations
  B_data <- getBfd(BObject)  # Retrieve Benford distribution data
  
  if (suspectTreshold |> is.null()) {
    # Plot without highlighting suspects
    ggplot(data = B_data, aes(x = digits, y = data.dist * 100)) +
      theme_bw() +
      scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
      scale_y_continuous(name = "Percentage", expand = expansion(mult = c(0, 0.05))) +
      geom_col(color = "black", fill = nonSuspectColor, width = 0.5) +
      labs(title = title) +
      stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1.4, se = FALSE, alpha = 0.5) +
      geom_point(size = 2) +
      theme(plot.title = element_text(size = 12, hjust = 0.5),
            panel.border = element_rect(size = 1),
            legend.position = "none") +
      guides(color = "none")
  } else {
    # Plot with suspect highlighting
    B_data$suspect <- ifelse(abs(B_data$data.dist - B_data$benford.dist) > suspectTreshold, "yes", "no")
    ggplot(data = B_data, aes(x = digits, y = data.dist * 100, fill = suspect)) +
      theme_bw() +
      scale_x_continuous(name = "Digit", breaks = seq(0, 10, 1)) +
      scale_y_continuous(name = "Percentage", expand = expansion(mult = c(0, 0.05))) +
      geom_col(color = "black", width = 0.5, show.legend = TRUE) +
      stat_smooth(aes(x = digits, y = benford.dist * 100), fill = "#999999", color = '#444444', linewidth = 1.4, se = FALSE, alpha = 0.5) +
      geom_point(aes(x = digits, y = data.dist * 100), size = 2, color = "black", show.legend = FALSE) +
      labs(title = title) +
      scale_fill_manual(values = c(nonSuspectColor, suspectColor)) +
      theme(
        plot.title = element_text(size = 12, hjust = 0.5),
        panel.border = element_rect(size = 1)
      ) +
      guides(color = "none")
  }
}
```

### Importing Dataset

```{r}
# Load the CSV file containing the dataset
bigData <- read.csv("../data/Cut-off Cumulative LCI v3.10.csv")

# Read the Excel file for header information (sheet 2, skip first 2 rows)
read_xlsx("../data/headerLCI.xlsx", sheet = 2, skip = 2) -> header
header[1, ] |> as.vector() -> headerNames  # Extract the first row of headers as a vector
colnames(bigData)[1:5] -> temp  # Extract the first 5 column names from bigData

# Rename specific columns to align with standard names
temp[2] <- "Activity Name"
temp[3] <- "Country"
temp |> str_replace_all(" ", ".") -> temp  # Replace spaces with periods in column names

# Combine the modified temp column names with the headerNames
headerNames <- c(temp, headerNames)
colnames(bigData) <- headerNames  # Assign the new header names to bigData

# Remove unwanted columns by pattern matching
bigData |> select(-matches("Exchange Name|Compartment|Subcompartment")) -> bigData

# Display the first few rows of the modified bigData
head(bigData)
```

```{r warning=FALSE}
# Summarize the number of rows per country and sort in descending order
bigData |> 
  group_by(Country) |> 
  summarise(n = n()) |> 
  arrange(desc(n)) -> rowsPerCountryBigData

# View the summarized data by country
rowsPerCountryBigData
```

### Grouping Countries in the Dataset

```{r}
# Load the list of EU country codes for grouping
read_csv("../data/contry_codes.csv") |> 
  dplyr::filter(Name %in% c(
    "Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", 
    "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", 
    "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta", 
    "Netherlands", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", 
    "Spain", "Sweden"
  )) |> 
  pull(Code) -> EUCountries  # Extract country codes for EU countries

# Identify countries in the dataset with hyphens in their names
bigData |> 
  select(Country) |> 
  dplyr::filter(str_detect(Country, "-")) |> 
  unique() -> countriesToGroup

# Group countries into broader categories
bigData |> 
  mutate(Country = case_when(
    str_detect(Country, "US-") ~ "US",  # Group US states into "US"
    str_detect(Country, "CA-") ~ "CA",  # Group Canadian provinces into "CA"
    str_detect(Country, "CN-") ~ "CN",  # Group Chinese regions into "CN"
    str_detect(Country, "BR-") ~ "BR",  # Group Brazilian regions into "BR"
    str_detect(Country, "AU-") ~ "AU",  # Group Australian regions into "AU"
    str_detect(Country, "IN-") ~ "IN",  # Group Indian regions into "IN"
    Country %in% EUCountries ~ "EU",   # Group EU countries into "EU"
    TRUE ~ as.character(Country)       # Retain other countries as they are
  )) -> bigDataCountriesGrouped

# Summarize the number of rows per country before and after grouping
bigData |> 
  group_by(Country) |> 
  summarise(n = n()) |> 
  arrange(desc(n))

bigDataCountriesGrouped |> 
  group_by(Country) |> 
  summarise(n = n()) |> 
  arrange(desc(n))
```

# Identifying Columns Conforming to Benford's Law

```{r}
# Identify all columns in the dataset that conform to Benford's Law
bigData |> benford_conforming() -> conforming_cols  # Apply the benford_conforming function to bigData

# Count the total number of conforming columns
conforming_cols |> length()

# Extract column names with "Close conformity" to Benford's Law
conforming_cols[conforming_cols == "Close conformity"] |> names() -> close_conforming_cols
close_conforming_cols |> length()  # Count the number of close conforming columns

# Extract column names with "Acceptable conformity" to Benford's Law
conforming_cols[conforming_cols == "Acceptable conformity"] |> names() -> acceptable_conformity_cols
acceptable_conformity_cols |> length()  # Count the number of acceptable conforming columns

# Extract column names with "Marginally acceptable conformity" to Benford's Law
conforming_cols[conforming_cols == "Marginally acceptable conformity"] |> names() -> marginally_acceptable_cols
marginally_acceptable_cols |> length()  # Count the number of marginally acceptable conforming columns

```

```{r}
# Find the column with the minimum MAD (Mean Absolute Deviation) value among close conforming columns

# Example of calculating MAD for a specific column (Silver I in ocean water)
bigData |> select("Silver I|water|ocean") |> pull() |> benford() -> yy
yy$MAD  # Retrieve MAD value for this column

# Initialize variables to track the minimum MAD value and its corresponding column
min_mad <- Inf  # Start with an infinitely large MAD value
min_mad_col <- ""

# Iterate through all close conforming columns to find the column with the smallest MAD
for (col in close_conforming_cols) {
  mad <- benford(bigData[[col]], number.of.digits = 1, sign = "both")$MAD  # Calculate MAD for the column
  if (mad < min_mad) {  # Update minimum MAD and corresponding column if a lower MAD is found
    min_mad <- mad
    min_mad_col <- col
  }
}

# Visualize the Benford's Law conformity of the column with the smallest MAD
bigData |> select(min_mad_col) |> pull() |> benford(1) |> plot()
```

# Testing benford sample size with ecoinvent columns

```{r}
# Function to sample a subset of a numeric vector and test its conformity to Benford's Law
sample_f <- function(x, n) {
  benford_vector <- sample(x, n) |> benford(1)  # Apply Benford's Law on a random sample of size n
  return(benford_vector$MAD.conformity)  # Return the MAD conformity result
}

# Analyze Close Conforming Columns
bigData |> select(min_mad_col) |> pull() -> perfect.benford.numbers.bigData  # Perfect Benford numbers
bigData |> select(close_conforming_cols[1]) |> pull() -> close.conf.numbers.bigData  # Numbers from a close conforming column

sample.df.bigData <- data.frame()

# Iterate over sample sizes (50 to 1000, step 50) and replicate the sampling 1000 times
for (i in seq(50, 1000, 50)) {
  replicate(1000, sample_f(perfect.benford.numbers.bigData, i)) -> vector
  data.frame(
    sample.size = i,
    percentage.of.conforming = vector[vector != "Nonconformity"] |> length() / length(vector) * 100
  ) -> df
  sample.df.bigData <- rbind(sample.df.bigData, df)
}

# Plot conformity percentage for close conforming column
ggplot(sample.df.bigData, aes(x = sample.size, y = percentage.of.conforming)) + 
  geom_col(fill = "#1E90FF", color = "black") +
  labs(x = "Sample Size", y = "Percentage of Conforming", 
       title = "Conformity Percentage by Sample Size",
       subtitle = "Ecoinvent Close Conforming Column") +
  scale_x_continuous(breaks = seq(50, 1000, 50)) +
  scale_y_continuous(breaks = seq(0, 100, 10)) +
  geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 16),
        plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 10), size = 10)) -> plot_close_conformity_sample

# Analyze Marginally Acceptable Columns
bigData |> select(marginally_acceptable_cols[1]) |> pull() -> marginally.acceptable.numbers.bigData

sample.df.bigData <- data.frame()

for (i in seq(50, 1000, 50)) {
  replicate(1000, sample_f(marginally.acceptable.numbers.bigData, i)) -> vector
  data.frame(
    sample.size = i,
    percentage.of.conforming = vector[vector != "Nonconformity"] |> length() / length(vector) * 100
  ) -> df
  sample.df.bigData <- rbind(sample.df.bigData, df)
}

# Plot conformity percentage for marginally acceptable column
ggplot(sample.df.bigData, aes(x = sample.size, y = percentage.of.conforming)) + 
  geom_col(fill = "#1E90FF", color = "black") +
  labs(x = "Sample Size", y = "Percentage of Conforming", 
       title = "Conformity Percentage by Sample Size",
       subtitle = "Ecoinvent Marginally Acceptable Column") +
  scale_x_continuous(breaks = seq(50, 1000, 50)) +
  scale_y_continuous(breaks = seq(0, 100, 10)) +
  geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 16),
        plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 10), size = 10)) -> plot_marginal_conformity_sample

# Analyze Acceptable Columns
bigData |> select(acceptable_conformity_cols[1]) |> pull() -> acceptable.numbers.bigData

sample.df.bigData <- data.frame()

for (i in seq(50, 1000, 50)) {
  replicate(1000, sample_f(acceptable.numbers.bigData, i)) -> vector
  data.frame(
    sample.size = i,
    percentage.of.conforming = vector[vector != "Nonconformity"] |> length() / length(vector) * 100
  ) -> df
  sample.df.bigData <- rbind(sample.df.bigData, df)
}

# Plot conformity percentage for acceptable column
ggplot(sample.df.bigData, aes(x = sample.size, y = percentage.of.conforming)) + 
  geom_col(fill = "#1E90FF", color = "black") +
  labs(x = "Sample Size", y = "Percentage of Conforming", 
       title = "Conformity Percentage by Sample Size",
       subtitle = "Ecoinvent Acceptable Column") +
  scale_x_continuous(breaks = seq(50, 1000, 50)) +
  scale_y_continuous(breaks = seq(0, 100, 10)) +
  geom_hline(yintercept = 95, linetype = "dashed", color = "#FF5733") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, margin = margin(b = 10), size = 16),
        plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 10), size = 10)) -> plot_acceptable_conformity_sample

# Save the generated plots as PNG files
ggsave("../results/plot_acceptable_conformity_sample.pdf", plot_acceptable_conformity_sample, width = 18, height = 10, units = "cm")
ggsave("../results/plot_marginal_conformity_sample.pdf", plot_marginal_conformity_sample, width = 18, height = 10, units = "cm")
ggsave("../results/plot_close_conformity_sample.pdf", plot_close_conformity_sample, width = 18, height = 10, units = "cm")
```

# Filtering and Summarizing Conforming Columns by Grouped Countries

```{r}
# Count the number of columns that conform to Benford's Law and are suitable for analysis
(conforming_cols != "Nonconformity" & conforming_cols != "Unsuitable data") |> sum()

conforming_cols |> table()
# Extract names of columns that conform to Benford's Law
conforming_cols[conforming_cols != "Nonconformity" & conforming_cols != "Unsuitable data"] |> names() -> conforming_cols_names

```

```{r}
# Filter the dataset to include key columns and conforming columns
bigData |> 
  select(Activity.UUID_Product.UUID, Activity.Name, Country, Reference.Product.Name, Reference.Product.Unit, conforming_cols_names) -> bigData

# Apply the same filtering to the grouped dataset
bigDataCountriesGrouped |> 
  select(Activity.UUID_Product.UUID, Activity.Name, Country, Reference.Product.Name, Reference.Product.Unit, conforming_cols_names) -> bigDataCountriesGrouped
```

```{r}
# Display the first few rows of the filtered datasets
bigData |> head()
bigDataCountriesGrouped |> head()
```

```{r}
# Group by Activity Name and count occurrences, then sort in descending order
bigDataCountriesGrouped |> 
  group_by(Activity.Name) |> 
  summarise(n = n()) |> 
  arrange(desc(n)) -> rowsPerActivityCountriesGrouped

# Extract unique Activity Names from the grouped dataset
unique(bigDataCountriesGrouped$Activity.Name) -> uniqueActivitiesGrouped

```

```{r warning = F}
# Group by Reference Product Name, count occurrences, and sort in descending order
bigDataCountriesGrouped |> 
  group_by(Reference.Product.Name) |> 
  summarise(n = n()) |> 
  arrange(desc(n))

# Extract unique Reference Product Names from the grouped dataset
unique(bigDataCountriesGrouped$Reference.Product.Name) -> uniqueRefProdName
```

```{r}
# Extract unique countries from the grouped dataset
unique(bigDataCountriesGrouped$Country) -> uniqueCountriesGrouped
```

# Filtering Data for Countries of Interest

```{r}
# Define the countries of interest
countries_of_interest <- c("CH", "EU", "BR", "CN", "CA", "US", "IN")

# Filter the grouped dataset to include only rows from the countries of interest
bigDataCountriesGrouped |> 
  dplyr::filter(Country %in% countries_of_interest) -> data_interesting_countries
```

# Separating Data into Compartments: Water, Air, Soil, Inventory Indicators, and Natural Resources

```{r}
# Extract column names from the dataset
bigDataCountriesGrouped |> colnames() -> col_names

# Identify unique strings within column names that are enclosed by "|" (e.g., "|Water|")
unique_strings <- unique(regmatches(names(bigDataCountriesGrouped), regexpr("\\|(.*?)\\|", names(bigDataCountriesGrouped))))

# Initialize an empty list to store dataframes for each category
listOfDF <- list()             

# Iterate through each unique string and separate the data by category
for (i in 1:length(unique_strings)) {
  name <- unique_strings[i]  # Get the current compartment name
  bigDataCountriesGrouped |> select(Country, contains(name)) -> df  # Select relevant columns for the compartment
  listOfDF[[i]] <- df  # Store the filtered dataframe in the list
}

# Assign dataframes from the list to specific categories
listOfDF[[2]] -> water.data                  # Data related to Water
listOfDF[[1]] -> air.data                    # Data related to Air
listOfDF[[3]] -> soil.data                   # Data related to Soil
listOfDF[[5]] -> inventory.indicator.data    # Data related to Inventory Indicators
listOfDF[[4]] -> natural.resource.data       # Data related to Natural Resources


water.data |> ncol()
air.data |> ncol()
soil.data |> ncol()
natural.resource.data |> ncol()
bigDataCountriesGrouped |> ncol()
```

# Carbon Analysis and Visualization Across Compartments

```{r}
# Identify columns related to carbon in the air dataset
matching_columns_carbon_air <- grep("carbon .*\\|", names(air.data), value = TRUE, ignore.case = TRUE)

# Create datasets for carbon-related columns across different compartments
air.data |> select(Country, contains(matching_columns_carbon_air)) -> carbon.air.data
water.data |> select(Country, contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.water.data
soil.data |> select(Country, contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.soil.data
natural.resource.data |> select(Country, contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.natural.resource.data
bigDataCountriesGrouped |> select(Country, contains(grep("carbon .*\\|", names(bigDataCountriesGrouped), value = TRUE, ignore.case = TRUE))) -> carbon.data

```

```{r}
# General Carbon Plot

# Initialize an empty data frame to store carbon conformity data
carbonDataPlotDF <- data.frame()

# Evaluate Benford's conformity for carbon-related data across countries of interest
for (country in countries_of_interest) {
  carbon.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  carbonDataPlotDF <- rbind(carbonDataPlotDF, df)
}

# Add a label column for visualization
carbonDataPlotDF <- carbonDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Generate ordered factor levels for countries based on conformity counts
carbonDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelscarbonData

# Create a heatmap plot for carbon conformity across all compartments
plotCarbon <- ggplot(data = carbonDataPlotDF, aes(y = factor(Country, levels = factorLevelscarbonData), 
                                                  x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.4) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")
plotCarbon

# Save the general carbon plot
ggsave("../results/plotCarbon.pdf", plotCarbon, width = 20, height = 10, units = "cm", limitsize = FALSE)
```

```{r}
# Carbon in Air Plot

# Initialize an empty data frame for carbon in air data
carbon.airDataPlotDF <- data.frame()

# Evaluate Benford's conformity for carbon in air data across countries of interest
for (country in countries_of_interest) {
  carbon.air.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  carbon.airDataPlotDF <- rbind(carbon.airDataPlotDF, df)
}

# Add a label column for visualization
carbon.airDataPlotDF <- carbon.airDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Generate ordered factor levels for countries based on conformity counts
carbon.airDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelscarbon.airData

# Create a heatmap plot for carbon conformity in air
plotCarbonAir <- ggplot(data = carbon.airDataPlotDF, aes(y = factor(Country, levels = factorLevelscarbon.airData), 
                                                         x = as.factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.4) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon in Air") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")
plotCarbonAir
```

```{r}
# Carbon in water
carbon.waterDataPlotDF <- data.frame()

# Loop through countries and perform Benford's Law analysis
for (country in countries_of_interest) {
  carbon.water.data |> 
    dplyr::filter(Country == country) |> 
    benford_conforming() -> benfordVec
  
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  
  carbon.waterDataPlotDF <- rbind(carbon.waterDataPlotDF, df)
}

# Add a label column based on column names
carbon.waterDataPlotDF <- carbon.waterDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Determine factor levels for countries based on conformity
carbon.waterDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelscarbon.waterData

# Plot: Carbon in water
plotCarbonWater <- ggplot(data = carbon.waterDataPlotDF, 
                          aes(y = factor(Country, levels = factorLevelscarbon.waterData),
                              x = as.factor(Label), 
                              fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon in water") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

# Display the plot with `plotCarbonWater`
```

```{r}
# Carbon in soil
carbon.soilDataPlotDF <- data.frame()

# Loop through countries and perform Benford's Law analysis
for (country in countries_of_interest) {
  carbon.soil.data |> 
    dplyr::filter(Country == country) |> 
    benford_conforming() -> benfordVec
  
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  
  carbon.soilDataPlotDF <- rbind(carbon.soilDataPlotDF, df)
}

# Add a label column based on column names
carbon.soilDataPlotDF <- carbon.soilDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Determine factor levels for countries based on conformity
carbon.soilDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelscarbon.soilData

# Plot: Carbon in soil
plotCarbonSoil <- ggplot(data = carbon.soilDataPlotDF, 
                         aes(y = factor(Country, levels = factorLevelscarbon.soilData),
                             x = as.factor(Label), 
                             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon in soil") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

# Display the plot with `plotCarbonSoil`
```

```{r}
# Carbon in natural resources
carbon.natural.resourceDataPlotDF <- data.frame()

# Loop through countries and perform Benford's Law analysis
for (country in countries_of_interest) {
  carbon.natural.resource.data |> 
    dplyr::filter(Country == country) |> 
    benford_conforming() -> benfordVec
  
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  
  carbon.natural.resourceDataPlotDF <- rbind(carbon.natural.resourceDataPlotDF, df)
}

# Add a label column based on column names
carbon.natural.resourceDataPlotDF <- carbon.natural.resourceDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Determine factor levels for countries based on conformity
carbon.natural.resourceDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelscarbon.natural.resourceData

# Plot: Carbon in natural resources
plotCarbonNaturalResource <- ggplot(data = carbon.natural.resourceDataPlotDF, 
                                    aes(y = factor(Country, levels = factorLevelscarbon.natural.resourceData),
                                        x = as.factor(Label), 
                                        fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon in natural resource") +
  scale_fill_manual(values = conformityColors) +
  theme(legend.position = "none", plot.title = element_text(vjust = 0)) +
  coord_equal()

# Display the plot with `plotCarbonNaturalResource`
```

# Heavy Metals Analysis and Visualization Across Compartments

```{r}
# Heavy metals in air
heavy_metals <- c("Lead", "Mercury", "Cadmium", "Arsenic", "Chromium", "Nickel", "Copper", "Zinc", "Manganese", "Iron")

# Extract columns related to heavy metals in air
air.data |> select(Country, matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.air.data

# Initialize an empty data frame for air data
heavy.metals.airDataPlotDF <- data.frame()

# Perform Benford's Law analysis for each country
for (country in countries_of_interest) {
  heavy.metals.air.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.airDataPlotDF <- rbind(heavy.metals.airDataPlotDF, df)
}

# Add a label column based on column names
heavy.metals.airDataPlotDF <- heavy.metals.airDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Determine country order based on conformity
heavy.metals.airDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsheavy.metals.airData

# Create plot for heavy metals in air
plotheavy.metals.air <- ggplot(data = heavy.metals.airDataPlotDF, 
                               aes(y = factor(Country, levels = factorLevelsheavy.metals.airData),
                                   x = as.factor(Label), 
                                   fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metals in air") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

plotheavy.metals.air
```

```{r}
# Heavy metals in soil
soil.data |> select(Country, matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.soil.data

# Initialize an empty data frame for soil data
heavy.metals.soilDataPlotDF <- data.frame()

# Perform Benford's Law analysis for each country
for (country in countries_of_interest) {
  heavy.metals.soil.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.soilDataPlotDF <- rbind(heavy.metals.soilDataPlotDF, df)
}

# Add a label column based on column names
heavy.metals.soilDataPlotDF <- heavy.metals.soilDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Determine country order based on conformity
heavy.metals.soilDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsheavy.metals.soilData

# Create plot for heavy metals in soil
plotheavy.metals.soil <- ggplot(data = heavy.metals.soilDataPlotDF, 
                                aes(y = factor(Country, levels = factorLevelsheavy.metals.soilData),
                                    x = as.factor(Label), 
                                    fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metals in soil") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

plotheavy.metals.soil
```

```{r}
# Heavy metals in water
water.data |> select(Country, matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.water.data

# Initialize an empty data frame for water data
heavy.metals.waterDataPlotDF <- data.frame()

# Perform Benford's Law analysis for each country
for (country in countries_of_interest) {
  heavy.metals.water.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.waterDataPlotDF <- rbind(heavy.metals.waterDataPlotDF, df)
}

# Add a label column based on column names
heavy.metals.waterDataPlotDF <- heavy.metals.waterDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Determine country order based on conformity
heavy.metals.waterDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsheavy.metals.waterData

# Create plot for heavy metals in water
plotheavy.metals.water <- ggplot(data = heavy.metals.waterDataPlotDF, 
                                 aes(y = factor(Country, levels = factorLevelsheavy.metals.waterData),
                                     x = as.factor(Label), 
                                     fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metals in water") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

plotheavy.metals.water
```

```{r}
# Heavy metals in natural resources
natural.resource.data |> select(Country, matches(paste(heavy_metals, collapse = "|"))) -> heavy.metals.natural.resource.data

# Initialize an empty data frame for natural resources data
heavy.metals.natural.resourceDataPlotDF <- data.frame()

# Perform Benford's Law analysis for each country
for (country in countries_of_interest) {
  heavy.metals.natural.resource.data |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  heavy.metals.natural.resourceDataPlotDF <- rbind(heavy.metals.natural.resourceDataPlotDF, df)
}

# Add a label column based on column names
heavy.metals.natural.resourceDataPlotDF <- heavy.metals.natural.resourceDataPlotDF %>%
  mutate(Label = as.integer(factor(Colname)))

# Determine country order based on conformity
heavy.metals.natural.resourceDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsheavy.metals.natural.resourceData

# Create plot for heavy metals in natural resources
plotheavy.metals.natural.resource <- ggplot(data = heavy.metals.natural.resourceDataPlotDF, 
                                            aes(y = factor(Country, levels = factorLevelsheavy.metals.natural.resourceData),
                                                x = as.factor(Label), 
                                                fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metal in natural resources") +
  scale_fill_manual(values = conformityColors) +
  coord_equal()

plotheavy.metals.natural.resource
```

```{r}
# Combine all plots into a single figure
all_categories_heavy_metals <- gridExtra::grid.arrange(
  plotheavy.metals.air,
  plotheavy.metals.soil,
  plotheavy.metals.water,
  plotheavy.metals.natural.resource,
  ncol = 1
)

# Save the combined plot
ggsave("../results/all_categories_heavy_metals.pdf", all_categories_heavy_metals, 
       width = 20, height = 28, units = "cm", limitsize = FALSE)
```

# Greenhouse Gases Analysis and Visualization

```{r}
# Identify relevant columns for greenhouse gases
bigDataCountriesGrouped |> colnames() -> colnames
greenhouse_gases <- colnames[grep("(Country|Carbon Dioxide|Methane|Nitrous Oxide|Water Vapor|Ozone|Chlorofluorocarbons|Hydrofluorocarbons|Perfluorocarbons|Sulfur Hexafluoride)", colnames, ignore.case = TRUE)]

# Extract greenhouse gases data from the dataset
bigDataCountriesGrouped[, greenhouse_gases] -> greenHouseGasesData

# Extract relevant greenhouse gas columns for air
air.data |> colnames() -> airColnames
GHGAir <- airColnames[grep("(Country|Carbon Dioxide|Methane|Nitrous Oxide|Water Vapor|Ozone|Chlorofluorocarbons|Hydrofluorocarbons|Perfluorocarbons|Sulfur Hexafluoride)", airColnames, ignore.case = TRUE)]
air.data[, GHGAir] -> GHGAirAirData

# Test Benford's Law conformity for a specific country (e.g., China)
greenHouseGasesData |> dplyr::filter(Country == "CN") |> benford_conforming() -> benfordVec
benfordVec[44]
```

```{r}
# Initialize an empty data frame for plotting
greenHouseGasesDataPlotDF <- data.frame()

# Perform Benford's Law conformity analysis for each country
for (country in countries_of_interest) {
  greenHouseGasesData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  greenHouseGasesDataPlotDF <- rbind(greenHouseGasesDataPlotDF, df)
}

# Determine country order based on the number of conforming columns
greenHouseGasesDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsGreenHouseGasesDataPlotDF

# Shorten column names for better readability in the plot
greenHouseGasesDataPlotDF$ShortenedColname <- sub("^(.*?\\|.*?)\\|.*$", "\\1", greenHouseGasesDataPlotDF$Colname)
greenHouseGasesDataPlotDF$ShortenedColname <- sub("\\|", " in the ", greenHouseGasesDataPlotDF$ShortenedColname)

# Add a label column for plotting
greenHouseGasesDataPlotDF <- greenHouseGasesDataPlotDF |> 
  mutate(Label = as.integer(factor(Colname)))

# Create a heatmap plot for greenhouse gases
plotGreenHouseGases <- ggplot(data = greenHouseGasesDataPlotDF, 
                              aes(y = factor(Country, levels = factorLevelsGreenHouseGasesDataPlotDF), 
                                  x = as.factor(Label), 
                                  fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +  # Draw tiles with black borders
  ylab("Country") +                              # Label for y-axis
  xlab("Columns") +                              # Label for x-axis
  labs(fill = "", title = "Greenhouse Gases") +  # Legend and title
  scale_fill_manual(values = conformityColors) + # Use predefined colors for conformity levels
  coord_equal()                                  # Ensure equal aspect ratio for tiles

# Display the plot
plotGreenHouseGases

# Save the plot to a file
ggsave("../results/plotGreenHouseGases.pdf", plotGreenHouseGases, 
       width = 20, height = 10, units = "cm", limitsize = FALSE)
```

## Toxic Substances Analysis and Visualization

```{r}
# Identify relevant columns for toxic substances
toxicSubstances <- colnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", colnames, ignore.case = TRUE)]

# Extract toxic substances data from the grouped dataset
bigDataCountriesGrouped[, toxicSubstances] -> toxicSubstancesData

# Extract columns related to toxic substances in air
air.data |> colnames() -> airColnames
toxicSubstancesAir <- airColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", airColnames, ignore.case = TRUE)]
air.data[, toxicSubstancesAir] -> toxicSubstancesAirData

# Extract columns related to toxic substances in water
water.data |> colnames() -> waterColnames
toxicSubstancesWater <- waterColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", waterColnames, ignore.case = TRUE)]
water.data[, toxicSubstancesWater] -> toxicSubstancesWaterData

# Extract columns related to toxic substances in soil
soil.data |> colnames() -> soilColnames
toxicSubstancesSoil <- soilColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", soilColnames, ignore.case = TRUE)]
soil.data[, toxicSubstancesSoil] -> toxicSubstancesSoilData

# Extract columns related to toxic substances in natural resources
natural.resource.data |> colnames() -> naturalResourcesColnames
toxicSubstancesNaturalResources <- naturalResourcesColnames[grep("(Country|Mercury|Lead|Arsenic|Cadmium|Polychlorinated Biphenyls|Dioxins|Chromium|Volatile Organic Compounds)", naturalResourcesColnames, ignore.case = TRUE)]
natural.resource.data[, toxicSubstancesNaturalResources] -> toxicSubstancesNaturalResourcesData
```

```{r}
# Initialize an empty data frame for all toxic substances
toxicSubstancesDataPlotDF <- data.frame()

# Perform Benford's Law conformity analysis for all countries
for (country in countries_of_interest) {
  toxicSubstancesData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesDataPlotDF <- rbind(toxicSubstancesDataPlotDF, df)
}

# Determine country order based on the number of conforming columns
toxicSubstancesDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelstoxicSubstancesDataPlotDF

# Shorten column names for better readability in the plot
toxicSubstancesDataPlotDF$ShortenedColname <- sub("^(.*?\\|.*?)\\|.*$", "\\1", toxicSubstancesDataPlotDF$Colname)
toxicSubstancesDataPlotDF$ShortenedColname <- sub("\\|", " in the ", toxicSubstancesDataPlotDF$ShortenedColname)

# Add a label column for plotting
toxicSubstancesDataPlotDF <- toxicSubstancesDataPlotDF |> 
  mutate(Label = as.integer(factor(Colname)))

# Create heatmap for all toxic substances
plotToxicSubstances <- ggplot(data = toxicSubstancesDataPlotDF, 
                               aes(y = factor(Country, levels = factorLevelstoxicSubstancesDataPlotDF), 
                                   x = as.factor(Label), 
                                   fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.15) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        legend.key = element_rect(colour = "black", size = 1))

# Save the plot
ggsave("../results/plotToxicSubstances.pdf", plotToxicSubstances, width = 20, height = 10, units = "cm")

```

```{r}
# Initialize an empty data frame for air data
toxicSubstancesAirDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  toxicSubstancesAirData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesAirDataPlotDF <- rbind(toxicSubstancesAirDataPlotDF, df)
}

toxicSubstancesAirDataPlotDF <- toxicSubstancesAirDataPlotDF |> 
  mutate(Label = as.integer(factor(Colname)))

toxicSubstancesAirDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsToxicSubstancesAirData

toxicSubstancesAirDataPlot <- ggplot(data = toxicSubstancesAirDataPlotDF, 
                                     aes(y = factor(Country, levels = factorLevelsToxicSubstancesAirData), 
                                         x = as.factor(Label), 
                                         fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in air") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")
```

```{r}
# Initialize an empty data frame for water data
toxicSubstancesWaterDataPlotDF <- data.frame()

for (country in countries_of_interest) {
  toxicSubstancesWaterData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesWaterDataPlotDF <- rbind(toxicSubstancesWaterDataPlotDF, df)
}

toxicSubstancesWaterDataPlotDF <- toxicSubstancesWaterDataPlotDF |> 
  mutate(Label = as.integer(factor(Colname)))

toxicSubstancesWaterDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsToxicSubstancesWaterData

toxicSubstancesWaterDataPlot <- ggplot(data = toxicSubstancesWaterDataPlotDF, 
                                       aes(y = factor(Country, levels = factorLevelsToxicSubstancesWaterData), 
                                           x = as.factor(Label), 
                                           fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in water") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")
```

```{r}
# Initialize an empty data frame for soil data
toxicSubstancesSoilDataPlotDF <- data.frame()

# Perform Benford's Law conformity analysis for soil data
for (country in countries_of_interest) {
  toxicSubstancesSoilData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesSoilDataPlotDF <- rbind(toxicSubstancesSoilDataPlotDF, df)
}

# Add a label column for plotting
toxicSubstancesSoilDataPlotDF <- toxicSubstancesSoilDataPlotDF |> 
  mutate(Label = as.integer(factor(Colname)))

# Determine country order based on the number of conforming columns
toxicSubstancesSoilDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsToxicSubstancesSoilData

# Create a heatmap plot for toxic substances in soil
toxicSubstancesSoilDataPlot <- ggplot(data = toxicSubstancesSoilDataPlotDF, 
                                      aes(y = factor(Country, levels = factorLevelsToxicSubstancesSoilData), 
                                          x = as.factor(Label), 
                                          fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in soil") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

# Display the plot
toxicSubstancesSoilDataPlot
```

```{r}
# Initialize an empty data frame for natural resources data
toxicSubstancesNaturalResourcesDataPlotDF <- data.frame()

# Perform Benford's Law conformity analysis for natural resources data
for (country in countries_of_interest) {
  toxicSubstancesNaturalResourcesData |> dplyr::filter(Country == country) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Country = country, row.names = NULL) -> df
  toxicSubstancesNaturalResourcesDataPlotDF <- rbind(toxicSubstancesNaturalResourcesDataPlotDF, df)
}

# Add a label column for plotting
toxicSubstancesNaturalResourcesDataPlotDF <- toxicSubstancesNaturalResourcesDataPlotDF |> 
  mutate(Label = as.integer(factor(Colname)))

# Determine country order based on the number of conforming columns
toxicSubstancesNaturalResourcesDataPlotDF |> 
  group_by(Country) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Country) -> factorLevelsToxicSubstancesNaturalResourcesData

# Create a heatmap plot for toxic substances in natural resources
toxicSubstancesNaturalResourcesDataPlot <- ggplot(data = toxicSubstancesNaturalResourcesDataPlotDF, 
                                                  aes(y = factor(Country, levels = factorLevelsToxicSubstancesNaturalResourcesData), 
                                                      x = as.factor(Label), 
                                                      fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Country") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances in natural resources") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none")

# Display the plot
toxicSubstancesNaturalResourcesDataPlot
```

# Checking Benford's Law Conformity for All Columns by Country

```{r}
# Checking Benford's Law conformity for all columns combined for each country
bigDataCountriesGrouped |> dplyr::filter(Country == "EU") |> benford_conforming_combined2() -> EU_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "CN") |> benford_conforming_combined2() -> CN_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "IN") |> benford_conforming_combined2() -> IN_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "BR") |> benford_conforming_combined2() -> BR_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "US") |> benford_conforming_combined2() -> US_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "CA") |> benford_conforming_combined2() -> CA_all_benford
bigDataCountriesGrouped |> dplyr::filter(Country == "CH") |> benford_conforming_combined2() -> CH_all_benford
```

```{r}
# Display the MAD conformity results for each country
cat("China:", CN_all_benford$MAD.conformity, "\n")
cat("India:", IN_all_benford$MAD.conformity, "\n")
cat("Brazil:", BR_all_benford$MAD.conformity, "\n")
cat("USA:", US_all_benford$MAD.conformity, "\n")
cat("Canada:", CA_all_benford$MAD.conformity, "\n")
cat("Switzerland:", CH_all_benford$MAD.conformity, "\n")
cat("EU:", EU_all_benford$MAD.conformity, "\n")
```

# Grouping Data by Continent

```{r}
# Define a function to map country codes to continents
get_continent <- function(country_code) {
  # Define a mapping of country codes to their respective continents
  continent_map <- list(
    "US" = "North America", "BR" = "South America", "IN" = "Asia", 
    "CN" = "Asia", "CH" = "Europe", "EU" = "Europe", 
    "CA" = "North America", "AU" = "Australia/Oceania", "JP" = "Asia", 
    "KR" = "Asia", "MX" = "North America", "NG" = "Africa", 
    "RoW" = "Rest of World", "RER" = "Europe", "CO" = "South America", 
    "Europe without Switzerland" = "Europe", "PE" = "South America", 
    "ZA" = "Africa", "UCTE" = "Europe", "RNA" = "Unknown", 
    "EC" = "South America", "IAI Area, Asia, without China and GCC" = "Asia", 
    "IAI Area, EU27 & EFTA" = "Europe", "IAI Area, Russia & RER w/o EU27 & EFTA" = "Europe", 
    "IAI Area, South America" = "South America", "UN-OCEANIA" = "Australia/Oceania", 
    "IAI Area, Africa" = "Africa", "IAI Area, Gulf Cooperation Council" = "Asia", 
    "IAI Area, North America" = "North America", "RAF" = "Unknown", 
    "RER w/o RU" = "Europe", "RLA" = "South America", "RU" = "Europe", 
    "SAS" = "Asia", "UN-SEASIA" = "Asia", "CL" = "South America", 
    "TR" = "Asia", "PH" = "Asia", "CR" = "North America", 
    "BD" = "Asia", "IL" = "Asia", "TN" = "Africa", 
    "KZ" = "Asia", "GH" = "Africa", "ID" = "Asia", 
    "AR" = "South America", "TH" = "Asia", "UA" = "Europe", 
    "CI" = "Africa", "HN" = "North America", "KE" = "Africa", 
    "MY" = "Asia", "VN" = "Asia", "North America without Quebec" = "North America", 
    "ZM" = "Africa", "CM" = "Africa", "IS" = "Europe", 
    "NI" = "North America", "NZ" = "Australia/Oceania", "SV" = "North America", 
    "WECC" = "North America", "NO" = "Europe", "GB" = "Europe", 
    "TW" = "Asia", "TZ" = "Africa", "BA" = "Europe", 
    "RS" = "Europe", "MK" = "Europe", "IR" = "Asia", 
    "NP" = "Asia", "SA" = "Asia", "AE" = "Asia", 
    "AL" = "Europe", "AM" = "Asia", "AO" = "Africa", 
    "AZ" = "Asia", "BH" = "Asia", "BJ" = "Africa", 
    "BN" = "Asia", "BO" = "South America", "BW" = "Africa", 
    "BY" = "Europe", "CD" = "Africa", "CG" = "Africa", 
    "CU" = "North America", "CW" = "North America", "DO" = "North America", 
    "DZ" = "Africa", "EG" = "Africa", "ER" = "Africa", 
    "ET" = "Africa", "GA" = "Africa", "GE" = "Asia", 
    "GI" = "Europe", "GT" = "North America", "HK" = "Asia", 
    "HT" = "North America", "IQ" = "Asia", "JM" = "North America", 
    "JO" = "Asia", "KG" = "Asia", "KH" = "Asia", 
    "KP" = "Asia", "KW" = "Asia", "LB" = "Asia", 
    "LK" = "Asia", "LY" = "Africa", "MA" = "Africa", 
    "MD" = "Europe", "ME" = "Europe", "MM" = "Asia", 
    "MN" = "Asia", "MU" = "Africa", "MZ" = "Africa", 
    "NE" = "Africa", "OM" = "Asia", "PA" = "North America", 
    "PK" = "Asia", "PY" = "South America", "QA" = "Asia", 
    "SD" = "Africa", "SG" = "Asia", "SN" = "Africa", 
    "SS" = "Africa", "SY" = "Asia", "TG" = "Africa", 
    "TJ" = "Asia", "TM" = "Asia", "TT" = "North America", 
    "UY" = "South America", "UZ" = "Asia", "VE" = "South America", 
    "XK" = "Europe", "YE" = "Asia", "ZW" = "Africa", 
    "RoE" = "Europe", "PG" = "Australia/Oceania", "Europe, without Russia and Türkiye" = "Europe", 
    "Europe without Austria" = "Europe", "MG" = "Africa", "ENTSO-E" = "Europe", 
    "RAS" = "Unknown", "RME" = "Unknown", "WEU" = "Europe", 
    "NORDEL" = "Europe", "UCTE without Germany" = "Europe", "RER w/o CH+DE" = "Europe", 
    "Europe without Switzerland and Austria" = "Europe", "RW" = "Unknown", "RER w/o DE+NL+RU" = "Europe"
  )
  
  # Lookup the continent for the provided country code
  continent <- continent_map[[country_code]]
  
  # Assign "Unknown" if the country code is not found in the mapping
  if (is.null(continent)) {
    continent <- "Unknown"
  }
  
  return(continent)
}

# Test the function with a sample of country codes
sample_codes <- c("US", "BR", "CN", "CH", "EU", "IN", "RoW", "IAI Area, Asia, without China and GCC", "UN-OCEANIA")
sapply(sample_codes, get_continent)

# Add a "Continent" column to the grouped dataset
bigDataCountriesGrouped |> mutate(Continent = sapply(Country, get_continent)) -> bigDataCountriesGrouped
```

# Filtering Data by Continent and Counting Rows

```{r}
# Filter data for each continent and store in separate datasets
bigDataCountriesGrouped |> dplyr::filter(Continent == "Europe") -> EuropeData
bigDataCountriesGrouped |> dplyr::filter(Continent == "Asia") -> AsiaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "North America") -> NorthAmericaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "South America") -> SouthAmericaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "Africa") -> AfricaData
bigDataCountriesGrouped |> dplyr::filter(Continent == "Australia/Oceania") -> AustraliaOceaniaData

# Print the number of rows for each continent's dataset
cat("Europe data rows:", EuropeData |> nrow(), "\n")
cat("Asia data rows:", AsiaData |> nrow(), "\n")
cat("North America data rows:", NorthAmericaData |> nrow(), "\n")
cat("South America data rows:", SouthAmericaData |> nrow(), "\n")
cat("Africa data rows:", AfricaData |> nrow(), "\n")
cat("Australia/Oceania data rows:", AustraliaOceaniaData |> nrow(), "\n")
```

# Analyzing Benford's Law Conformity by Continent

```{r}
# Apply Benford's Law statistical analysis to each continent's dataset
AsiaData |> benford_conforming_stats() -> AsiaColsBenfordVec
EuropeData |> benford_conforming_stats() -> EuropeColsBenfordVec
NorthAmericaData |> benford_conforming_stats() -> NorthAmericaColsBenfordVec
SouthAmericaData |> benford_conforming_stats() -> SouthAmericaColsBenfordVec
AfricaData |> benford_conforming_stats() -> AfricaColsBenfordVec
AustraliaOceaniaData |> benford_conforming_stats() -> AustraliaOceaniaColsBenfordVec
```

```{r}
# Apply Benford's Law conformity checks to each continent's dataset
EuropeData |> benford_conforming() -> EuropeBenfordVec
AsiaData |> benford_conforming() -> AsiaBenfordVec
NorthAmericaData |> benford_conforming() -> NorthAmericaBenfordVec
SouthAmericaData |> benford_conforming() -> SouthAmericaBenfordVec
AfricaData |> benford_conforming() -> AfricaBenfordVec
AustraliaOceaniaData |> benford_conforming() -> AustraliaOceaniaBenfordVec
```

```{r}
# Create data frames for each continent containing conformity results and column names
asia_df <- data.frame(Continent = "Asia", Conformity = AsiaBenfordVec, Colname = names(AsiaBenfordVec))
europe_df <- data.frame(Continent = "Europe", Conformity = EuropeBenfordVec, Colname = names(EuropeBenfordVec))
north_america_df <- data.frame(Continent = "North America", Conformity = NorthAmericaBenfordVec, Colname = names(NorthAmericaBenfordVec))
south_america_df <- data.frame(Continent = "South America", Conformity = SouthAmericaBenfordVec, Colname = names(SouthAmericaBenfordVec))
africa_df <- data.frame(Continent = "Africa", Conformity = AfricaBenfordVec, Colname = names(AfricaBenfordVec))

# Display the number of columns analyzed for Asia
AsiaBenfordVec |> length()

# Combine all continent-specific data frames into one
all_df <- rbind(asia_df, europe_df, north_america_df, south_america_df, africa_df)

# Add a numerical label for each column name for use in visualizations
all_df |> mutate(Label = as.integer(factor(Colname))) -> all_df
```

# Carbon Plot by Continent

```{r}
# Filter columns related to carbon across all continents
matches <- grep("carbon .*\\|", all_df$Colname, value = TRUE, ignore.case = TRUE)
all_df |> dplyr::filter(Colname %in% matches) -> carbon_df

# Add a new label column for visualization purposes
carbon_df |> mutate(Label2 = as.integer(factor(Colname))) -> carbon_df

# Generate ordered levels for continents based on the number of conforming columns
carbon_df |> 
  group_by(Continent) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Continent) -> carbon_df_levels

# Create a heatmap plot for carbon-related columns by continent
carbon_df |> 
  ggplot(aes(y = factor(Continent, levels = carbon_df_levels), 
             x = as.factor(Label2), 
             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +  # Add tiles with borders
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Carbon by Continent") +
  scale_fill_manual(values = conformityColors) +  # Apply predefined colors for conformity levels
  coord_equal() +  # Ensure equal aspect ratio for tiles
  theme(
    legend.position = "top", 
    legend.key = element_rect(colour = "black", size = 0.1)  # Customize legend appearance
  )

# Save the plot as a JPEG file
ggsave("../results/carbon_by_continent.pdf", last_plot(), width = 20, height = 10, units = "cm", limitsize = FALSE)

# Display the frequency of conformity levels in the carbon dataset
carbon_df$Conformity |> table()

# Save the carbon dataset for further analysis as a CSV file
carbon_df |> 
  select(-Label) |>  # Drop the original label column
  rename(Label = Label2) |>  # Rename the new label column to "Label"
  write_csv("../data/carbon_by_continent.csv")
```

# Toxic Substances by Continent

```{r}
# Filter data for toxic substances
all_df |> filter(Colname %in% close_conforming_cols) |> dplyr::filter(Colname %in% toxicSubstances) -> toxicSubstances_df

# Add label for visualization
toxicSubstances_df |> mutate(Label2 = as.integer(factor(Colname))) -> toxicSubstances_df

# Generate ordered levels for continents based on the number of conforming columns
toxicSubstances_df |> 
  group_by(Continent) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Continent) -> toxicSubstances_df_levels

# Create a heatmap for toxic substances by continent
toxicSubstances_df |> 
  ggplot(aes(y = factor(Continent, levels = toxicSubstances_df_levels), 
             x = as.factor(Label2), 
             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.25) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Toxic substances by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

# Save the plot as a PNG file
ggsave("../results/toxic_substances_by_continent.pdf", last_plot(), width = 20, height = 10, units = "cm", limitsize = FALSE)

# Save the data to a CSV file
toxicSubstances_df |> 
  select(-Label) |> 
  rename(Label = Label2) |> 
  write_csv("../data/toxic_substances_by_continent.csv")

```

# Heavy Metals by Continent

```{r}
#Heavy metals
heavy_metals <- c("Lead", "Mercury", "Cadmium", "Arsenic", "Chromium", "Nickel", "Copper", "Zinc", "Manganese", "Iron")

# Select names of all columns that contain some of the heavy metals

bigDataCountriesGrouped |> select(Country,matches(paste(heavy_metals, collapse = "|"))) |> colnames() -> heavyMetals

# Filter data for heavy metals
all_df |> dplyr::filter(Colname %in% heavyMetals) -> heavyMetals_df

# Add label for visualization
heavyMetals_df |> mutate(Label2 = as.integer(factor(Colname))) -> heavyMetals_df

# Generate ordered levels for continents based on the number of conforming columns
heavyMetals_df |> 
  group_by(Continent) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Continent) -> heavyMetals_df_levels

# Create a heatmap for heavy metals by continent
heavyMetals_df |> 
  ggplot(aes(y = factor(Continent, levels = heavyMetals_df_levels), 
             x = as.factor(Label2), 
             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.2) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Heavy metals by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

# Divide the data into two parts for better visualization
heavyMetals_df |> dplyr::filter(Label2 %in% 1:round(length(unique(heavyMetals_df$Label2)) / 2)) -> firstHalfHeavyMetals
heavyMetals_df |> dplyr::filter(Label2 %in% (round(length(unique(heavyMetals_df$Label2)) / 2) + 1):length(unique(heavyMetals_df$Label2))) -> secondHalfHeavyMetals

# Create separate plots for each half
firstHalfHeavyMetals |> 
  ggplot(aes(y = factor(Continent, levels = heavyMetals_df_levels), 
             x = as.factor(Label2), 
             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.2) +
  ylab("Continent") +
  xlab("") +
  labs(fill = "", title = "Heavy metals by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top") -> pp1

secondHalfHeavyMetals |> 
  ggplot(aes(y = factor(Continent, levels = heavyMetals_df_levels), 
             x = as.factor(Label2), 
             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.2) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none") -> pp2

# Combine the plots and save as PNG
gridExtra::grid.arrange(pp1, pp2, ncol = 1) -> heavyMetalsPlot
ggsave("../results/heavy_metals_by_continent.pdf", heavyMetalsPlot, width = 25, height = 10, units = "cm", limitsize = FALSE)

# Save the combined data to a CSV file
firstHalfHeavyMetals |> 
  rbind(secondHalfHeavyMetals) |> 
  select(-Label) |> 
  rename(Label = Label2) |> 
  write_csv("../data/heavy_metals_by_continent.csv")
```

# Greenhouse Gases by Continent

```{r}
# Filter data for greenhouse gases
all_df |> dplyr::filter(Colname %in% greenhouse_gases) -> greenHouseGases_df

# Add label for visualization
greenHouseGases_df |> mutate(Label2 = as.integer(factor(Colname))) -> greenHouseGases_df

# Generate ordered levels for continents based on the number of conforming columns
greenHouseGases_df |> 
  group_by(Continent) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Continent) -> greenHouseGases_df_levels

# Create a heatmap for greenhouse gases by continent
greenHouseGases_df |> 
  ggplot(aes(y = factor(Continent, levels = greenHouseGases_df_levels), 
             x = as.factor(Label2), 
             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Greenhouse gases by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")

# Save the plot as a PNG file
ggsave("../results/green_house_gases_by_continent.pdf", last_plot(), width = 25, height = 10, units = "cm", limitsize = FALSE)

# Save the data to a CSV file
greenHouseGases_df |> 
  select(-Label) |> 
  rename(Label = Label2) |> 
  write_csv("../data/green_house_gases_by_continent.csv")

# Filter data for greenhouse gases specifically in air
greenHouseGases_df[str_detect("|air", rownames(greenHouseGases_df)), ] -> greenHouseGases_df_air

# Create a heatmap for greenhouse gases in air
greenHouseGases_df_air |> 
  ggplot(aes(y = factor(Continent, levels = greenHouseGases_df_levels), 
             x = as.factor(Label2), 
             fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.3) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Greenhouse gases in air by continent") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top")
```

# Water Data Plots by Continent

```{r}
# Assign continents to the water data
water.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsWaterData

# Get unique continents from the grouped data, excluding specific values
bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents
continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest

# Initialize an empty data frame for plotting
continentsWaterDataPlotDF <- data.frame()

# Perform Benford's Law analysis for each continent of interest
for (continent in continents_of_interest) {
  continentsWaterData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsWaterDataPlotDF <- rbind(continentsWaterDataPlotDF, df)
}

# Generate ordered levels for continents based on conformity counts
continentsWaterDataPlotDF |> 
  group_by(Continent) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Continent) -> factorLevelsWaterData

# Add numerical labels for columns
continentsWaterDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsWaterDataPlotDF

# Divide column names into two parts for better visualization
uniqueColnamesWaterData <- continentsWaterDataPlotDF$Colname |> unique()
uniqueColnamesWaterData[1:round(length(uniqueColnamesWaterData) / 2)] -> firstHalfWaterDataColnames
uniqueColnamesWaterData[(round(length(uniqueColnamesWaterData) / 2) + 1):length(uniqueColnamesWaterData)] -> secondHalfWaterDataColnames

# Create separate data frames for each half
continentsWaterDataPlotDF1 <- continentsWaterDataPlotDF |> dplyr::filter(Colname %in% firstHalfWaterDataColnames)
continentsWaterDataPlotDF2 <- continentsWaterDataPlotDF |> dplyr::filter(Colname %in% secondHalfWaterDataColnames)

# Generate plots for each half
continentsWaterDataPlotDF1 |> 
  ggplot(aes(y = factor(Continent, levels = factorLevelsWaterData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("") +
  labs(fill = "", title = "Water columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4), axis.text.y = element_text(size = 4, hjust = 1)) -> firstWaterPlot

continentsWaterDataPlotDF2 |> 
  ggplot(aes(y = factor(Continent, levels = factorLevelsWaterData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none", axis.text.x = element_text(size = 4), axis.text.y = element_text(size = 4, hjust = 1)) -> secondWaterPlot

# Combine the two plots into one layout
gridExtra::grid.arrange(firstWaterPlot, secondWaterPlot, ncol = 1) -> waterPlot

# Save the water plot to a PDF
ggsave("../results/water_by_continent.pdf", waterPlot, width = 25, height = 6, units = "cm", limitsize = TRUE)

# Save the data to a CSV file
continentsWaterDataPlotDF |> write_csv("../data/water_by_continent.csv")
```

# Air Data Plots by Continent

```{r}
# Assign continents to the air data
air.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsAirData

# Get unique continents from the grouped data, excluding specific values
bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents
continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest

# Initialize an empty data frame for plotting
continentsAirDataPlotDF <- data.frame()

# Perform Benford's Law analysis for each continent of interest
for (continent in continents_of_interest) {
  continentsAirData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsAirDataPlotDF <- rbind(continentsAirDataPlotDF, df)
}

# Generate ordered levels for continents based on conformity counts
continentsAirDataPlotDF |> 
  group_by(Continent) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Continent) -> factorLevelsAirData

# Add numerical labels for columns
continentsAirDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsAirDataPlotDF

# Divide column names into two parts for better visualization
uniqueColnamesAirData <- continentsAirDataPlotDF$Colname |> unique()
uniqueColnamesAirData[1:round(length(uniqueColnamesAirData) / 2)] -> firstHalfAirDataColnames
uniqueColnamesAirData[(round(length(uniqueColnamesAirData) / 2) + 1):length(uniqueColnamesAirData)] -> secondHalfAirDataColnames

# Create separate data frames for each half
continentsAirDataPlotDF1 <- continentsAirDataPlotDF |> dplyr::filter(Colname %in% firstHalfAirDataColnames)
continentsAirDataPlotDF2 <- continentsAirDataPlotDF |> dplyr::filter(Colname %in% secondHalfAirDataColnames)

# Generate plots for each half
continentsAirDataPlotDF1 |> 
  ggplot(aes(y = factor(Continent, levels = factorLevelsAirData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("") +
  labs(fill = "", title = "Air columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4), axis.text.y = element_text(size = 4, hjust = 1)) -> firstAirPlot

continentsAirDataPlotDF2 |> 
  ggplot(aes(y = factor(Continent, levels = factorLevelsAirData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "none", axis.text.x = element_text(size = 4), axis.text.y = element_text(size = 4, hjust = 1)) -> secondAirPlot

# Combine the two plots into one layout
gridExtra::grid.arrange(firstAirPlot, secondAirPlot, ncol = 1) -> airPlot

# Save the air plot to a PDF
ggsave("../results/air_by_continent.pdf", airPlot, width = 20, height = 10, units = "cm", limitsize = TRUE)

# Save the data to a CSV file
continentsAirDataPlotDF |> write_csv("../data/air_by_continent.csv")
```

# Soil Data Plots by Continent

```{r}
# Do the same for soil data

soil.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsSoilData
bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents
continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest
continentsSoilDataPlotDF <- data.frame()

for (continent in continents_of_interest) {
  continentsSoilData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsSoilDataPlotDF <- rbind(continentsSoilDataPlotDF, df)
}

continentsSoilDataPlotDF |> group_by(Continent) |> summarise(n = sum(Conformity != "Nonconformity")) |> arrange(desc(n)) |> pull(Continent)-> factorLevelsSoilData

continentsSoilDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsSoilDataPlotDF

# divide vector into 2 equal parts by Colname

uniqueColnamesSoilData <- continentsSoilDataPlotDF$Colname |> unique()

uniqueColnamesSoilData[1:round(length(uniqueColnamesSoilData)/2)] -> firstHalfSoilDataColnames

uniqueColnamesSoilData[(round(length(uniqueColnamesSoilData)/2)+1):length(uniqueColnamesSoilData)] -> secondHalfSoilDataColnames

continentsSoilDataPlotDF1 <- continentsSoilDataPlotDF |> dplyr::filter(Colname %in% firstHalfSoilDataColnames)
continentsSoilDataPlotDF2 <- continentsSoilDataPlotDF |> dplyr::filter(Colname %in% secondHalfSoilDataColnames)

continentsSoilDataPlotDF |> ggplot(aes(y = factor(Continent, levels = factorLevelsSoilData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Soil columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4),axis.text.y = element_text(size = 4, hjust = 1)) -> soilPlot

ggsave("../results/soil_by_continent.pdf", soilPlot, width = 17.5, height = 4, units = "cm", limitsize = T)
 
continentsSoilDataPlotDF |> write_csv("../data/soil_by_continent.csv")
```

# Natural Resources Data Plots by Continent

```{r}
# Assign continents to the natural resources data
natural.resource.data |> mutate(Continent = sapply(Country, get_continent)) -> continentsNaturalResourcesData

# Get unique continents from the grouped data, excluding specific values
bigDataCountriesGrouped |> pull(Continent) |> unique() -> continents
continents[continents != "Unknown" & continents != "Rest of World" & continents != "Australia/Oceania"] -> continents_of_interest

# Initialize an empty data frame for plotting
continentsNaturalResourcesDataPlotDF <- data.frame()

# Perform Benford's Law analysis for each continent of interest
for (continent in continents_of_interest) {
  continentsNaturalResourcesData |> dplyr::filter(Continent == continent) |> benford_conforming() -> benfordVec
  data.frame(Colname = names(benfordVec), Conformity = benfordVec, Continent = continent, row.names = NULL) -> df
  continentsNaturalResourcesDataPlotDF <- rbind(continentsNaturalResourcesDataPlotDF, df)
}

# Generate ordered levels for continents based on conformity counts
continentsNaturalResourcesDataPlotDF |> 
  group_by(Continent) |> 
  summarise(n = sum(Conformity != "Nonconformity")) |> 
  arrange(desc(n)) |> 
  pull(Continent) -> factorLevelsNaturalResourcesData

# Add numerical labels for columns
continentsNaturalResourcesDataPlotDF |> mutate(Label = as.integer(factor(Colname))) -> continentsNaturalResourcesDataPlotDF

# Create a plot for natural resources data by continent
continentsNaturalResourcesDataPlotDF |> 
  ggplot(aes(y = factor(Continent, levels = factorLevelsNaturalResourcesData), x = factor(Label), fill = factor(Conformity, levels = names(conformityColors)))) +
  geom_tile(color = "black", linewidth = 0.1) +
  ylab("Continent") +
  xlab("Columns") +
  labs(fill = "", title = "Natural resources columns") +
  scale_fill_manual(values = conformityColors) +
  coord_equal() +
  theme(legend.position = "top", axis.text.x = element_text(size = 4), axis.text.y = element_text(size = 4, hjust = 1)) -> naturalResourcesPlot

# Save the natural resources plot to a PDF
ggsave("../results/natural_resources_by_continent.pdf", naturalResourcesPlot, width = 17.5, height = 4, units = "cm", limitsize = TRUE)

# Save the natural resources data to a CSV file
continentsNaturalResourcesDataPlotDF |> write_csv("../data/natural_resources_by_continent.csv")
```

# Europe: All Data Combined

```{r}
# Perform Benford's Law analysis for all combined data from Europe
bigDataCountriesGrouped |> 
  dplyr::filter(Continent == "Europe") |> 
  benford_conforming_combined2() -> benford_ecoinvent_EUROPE
```

# Asia: All Data Combined

```{r}
# Perform Benford's Law analysis for all combined data from Asia
bigDataCountriesGrouped |> 
  dplyr::filter(Continent == "Asia") |> 
  benford_conforming_combined2() -> benford_ecoinvent_ASIA
```

# Australia: All Data Combined

```{r}
# Perform Benford's Law analysis for Australia
bigDataCountriesGrouped |> 
  dplyr::filter(Country == "AU") |> 
  benford_conforming_combined2() -> benford_ecoinvent_AUSTRALIA

# Perform Benford's Law analysis for Australia/Oceania
bigDataCountriesGrouped |> 
  dplyr::filter(Continent == "Australia/Oceania") |> 
  benford_conforming_combined2() -> benford_ecoinvent_AUSTRALIA_OCEANIA
```

# Africa: All Data Combined

```{r}
# Perform Benford's Law analysis for all combined data from Africa
bigDataCountriesGrouped |> 
  dplyr::filter(Continent == "Africa") |> 
  benford_conforming_combined2() -> benford_ecoinvent_AFRICA
```

# North America: All Data Combined

```{r}
# Perform Benford's Law analysis for all combined data from North America
bigDataCountriesGrouped |> 
  dplyr::filter(Continent == "North America") |> 
  benford_conforming_combined2() -> benford_ecoinvent_N_AMERICA
```

# South America: All Data Combined

```{r}
# Perform Benford's Law analysis for all combined data from South America
bigDataCountriesGrouped |> 
  dplyr::filter(Continent == "South America") |> 
  benford_conforming_combined2() -> benford_ecoinvent_S_AMERICA
```

# Conformity of Each Coulumn - Per Continent

```{r}
# Perform Benford's Law analysis on individual columns for each continent
EuropeData |> benford_conforming() -> EuropeBenfordVec
AsiaData |> benford_conforming() -> AsiaBenfordVec
NorthAmericaData |> benford_conforming() -> NorthAmericaBenfordVec
SouthAmericaData |> benford_conforming() -> SouthAmericaBenfordVec
AfricaData |> benford_conforming() -> AfricaBenfordVec
AustraliaOceaniaData |> benford_conforming() -> AustraliaOceaniaBenfordVec
```

# Benford's Law Plots for Continents

```{r}
# Generate Benford's Law plot for Europe
benford_ecoinvent_EUROPE |> benfordPlot("Europe")

# Generate Benford's Law plot for Asia
benford_ecoinvent_ASIA |> benfordPlot("Asia")

# Generate Benford's Law plot for North America
benford_ecoinvent_N_AMERICA |> benfordPlot("North America")

# Generate Benford's Law plot for South America
benford_ecoinvent_S_AMERICA |> benfordPlot("South America")

# Generate Benford's Law plot for Africa
benford_ecoinvent_AFRICA |> benfordPlot("Africa")

# Generate Benford's Law plot for Australia/Oceania
benford_ecoinvent_AUSTRALIA_OCEANIA |> benfordPlot("Australia/Oceania")
```

# Ecoinvent: All Data Combined

```{r}
# Perform Benford's Law analysis for all combined Ecoinvent data
bigDataCountriesGrouped |> benford_conforming_combined2() -> benford_ecoinvent_all
```

# Other datasets

## World Steel Dataset

### All Data

```{r}
# Load the World Steel 2020 dataset
worldsteel_2020 <- read_delim("../data/worldsteel_2020.csv", 
                              delim = ";", escape_double = FALSE, col_names = FALSE, 
                              trim_ws = TRUE, skip = 113)

# Perform Benford's Law analysis on undefined categories in the dataset
worldsteel_2020 |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_worldsteel_all
```

### Asia Data

```{r}
# Load the World Steel Asia dataset
worldsteel_2020_Asia_all <- read_delim("../data/worldsteel_2020_Asia_all.csv", 
                                       delim = ";", escape_double = FALSE, col_names = FALSE, 
                                       trim_ws = TRUE, skip = 112)

# Perform Benford's Law analysis on undefined categories in Asia dataset
worldsteel_2020_Asia_all |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_worldsteel_ASIA
```

### Europe Data

```{r}
# Load the World Steel Europe dataset
worldsteel_EUROPE <- read_delim("../data/worldsteel_EUROPE.csv", 
                                delim = ";", escape_double = FALSE, col_names = FALSE, 
                                trim_ws = TRUE, skip = 110)

# Perform Benford's Law analysis on undefined categories in Europe dataset
worldsteel_EUROPE |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_worldsteel_EUROPE
```

### Global Data

```{r}
# Load the World Steel Global dataset
worldsteel_2020_GLO_all <- read_delim("../data/worldsteel_2020_GLO_all.csv", 
                                      delim = ";", escape_double = FALSE, col_names = FALSE, 
                                      trim_ws = TRUE, skip = 110)

# Perform Benford's Law analysis on undefined categories in Global dataset
worldsteel_2020_GLO_all |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_worldsteel_GLO
```

## OzLCI2019 Dataset

### All Data

```{r}
# Load the OzLCI2019 dataset
OzLCI2019 <- read_delim("../data/OzLCI2019.csv", 
                        delim = ";", escape_double = FALSE, col_names = FALSE, 
                        trim_ws = TRUE, skip = 97)

# Perform Benford's Law analysis on undefined categories in the dataset
OzLCI2019 |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_OzLCI2019_all
```

### Australia Data

```{r}
# Load the OzLCI2019 Australia dataset
OzLCI2019_AUSTRALIA <- read_delim("../data/OzLCI2019_AUSTRALIA.csv", 
                                  delim = ";", escape_double = FALSE, col_names = FALSE, 
                                  trim_ws = TRUE, skip = 97)

# Perform Benford's Law analysis on undefined categories in the Australia dataset
OzLCI2019_AUSTRALIA |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_OzLCI2019_AUSTRALIA
```

# GreenDelta Dataset

### All Data

```{r}
# Load the ELCD dataset
elcd_3_2_greendelta_v2_18_correction_20220908 <- read_delim("../data/elcd_3_2_greendelta_v2_18_correction_20220908.csv", 
                                                           delim = ";", escape_double = FALSE, col_names = FALSE, 
                                                           trim_ws = TRUE, skip = 112)

# Perform Benford's Law analysis on undefined categories in the dataset
elcd_3_2_greendelta_v2_18_correction_20220908 |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_elcd_3_2_greendelta_v2_18_correction_20220908_all
```

### Europe Data

```{r}
# Load the Europe-specific Greendelta dataset
greendelta_EUROPE <- read_delim("../data/greendelta_EUROPE.csv", 
                                delim = ";", escape_double = FALSE, col_names = FALSE, 
                                trim_ws = TRUE, skip = 111)

# Filter data for undefined categories
greendelta_EUROPE |> 
  dplyr::filter(X5 == "Undefined") -> data

# Perform Benford's Law analysis on the filtered data
data |> 
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_greendelta_EUROPE
```

## Needs Dataset

### All Data

```{r}
# Load the NEEDS dataset
needs_18 <- read_delim("../data/needs_18(1).csv", 
                       delim = ";", escape_double = FALSE, col_names = FALSE, 
                       trim_ws = TRUE, skip = 98)

# Perform Benford's Law analysis on undefined categories in the dataset
needs_18 |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_needs_18_all
```

### Europe Data

```{r}
# Load the NEEDS Europe dataset
needs_EUROPE <- read_delim("../data/needs_EUROPE.csv", 
                           delim = ";", escape_double = FALSE, col_names = FALSE, 
                           trim_ws = TRUE, skip = 100)

# Perform Benford's Law analysis on undefined categories in the Europe dataset
needs_EUROPE |> 
  dplyr::filter(X5 == "Undefined") |>  # Filter for undefined categories
  select(X4) |>  # Select relevant column
  mutate(X4 = as.numeric(X4)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X4 = first_digit(X4)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_needs_EUROPE
```

## Bioenergiedat Dataset

### All Data

```{r}
# Load the Bioenergiedat dataset
bioenergiedat_18 <- read_delim("../data/bioenergiedat_18.csv", 
                               delim = ";", escape_double = FALSE, col_names = FALSE, 
                               trim_ws = TRUE, skip = 100)

# Perform Benford's Law analysis on undefined categories in the dataset
bioenergiedat_18 |> 
  dplyr::filter(X4 == "Undefined") |>  # Filter for undefined categories
  select(X3) |>  # Select relevant column
  mutate(X3 = as.numeric(X3)) |>  # Convert to numeric
  na.omit() |>  # Remove NA values
  mutate(X3 = first_digit(X3)) |>  # Extract first digit
  pull() |> 
  benford(number.of.digits = 1) -> benford_bioenergiedat_18_all
```

## Benford's Law Analysis and Visualization for Multiple Databases

```{r}
# Generate Benford plots for each dataset
benfordPlot(benford_worldsteel_all, "worldsteel database", suspectTreshold = 0.01) -> p2
benfordPlot(benford_OzLCI2019_all, "OzLCI2019 database", suspectTreshold = 0.01) -> p3
benfordPlot(benford_elcd_3_2_greendelta_v2_18_correction_20220908_all, "Environmental Footprint database", suspectTreshold = 0.01) -> p4
benfordPlot(benford_needs_18_all, "needs database", suspectTreshold = 0.01) -> p5
benfordPlot(benford_bioenergiedat_18_all, "bioenergiedat database", suspectTreshold = 0.01) -> p6
benfordPlot(benford_ecoinvent_all, "ecoinvent database", suspectTreshold = 0.01) -> p1
```

```{r}
# Function to extract the legend from a plot
get_legend <- function(myggplot) {
  tmp <- ggplot_gtable(ggplot_build(myggplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

# Customize legend for the Bioenergiedat plot
p6 <- p6 + 
  labs(color = "", fill = "Suspect (absolute difference between observed and expected > 1%)") + 
  theme(
    legend.text = element_text(size = 12),  # Adjust legend text size
    legend.title = element_text(size = 12),  # Adjust legend title size
    legend.position = "bottom",  # Position legend at the bottom
    legend.box = "horizontal",  # Arrange legend items horizontally
    legend.spacing.x = unit(0.3, "cm")
  ) +
  guides(color = "none")

# Extract the legend
legend <- get_legend(p6)

# Remove legends from individual plots
p1 <- p1 + theme(legend.position = "none")
p2 <- p2 + theme(legend.position = "none")
p3 <- p3 + theme(legend.position = "none")
p4 <- p4 + theme(legend.position = "none")
p5 <- p5 + theme(legend.position = "none")
p6 <- p6 + theme(legend.position = "none")

# Combine plots and place the legend at the top
allPlots <- gridExtra::grid.arrange(
  legend,  # Add the legend as the first row
  gridExtra::arrangeGrob(
    p1, p2, p3, p4, p5, p6, 
    ncol = 2, layout_matrix = rbind(c(1, 2), c(3, 4), c(5, 6))
  ),
  nrow = 2, heights = c(1, 10)  # Adjust heights to balance legend and plots
)
```

```{r}
# Save the combined plot with all databases compared
ggsave(allPlots, file = "../results/allDataComparison.pdf", width = 20, height = 28, units = "cm")
```

# Benford's Law Analysis: Regional and Continent Comparisons

## Europe Data Comparison

```{r}
# Generate Benford plots for Europe datasets
benfordPlot(benford_worldsteel_EUROPE, "Worldsteel") -> p1_EU
benfordPlot(benford_greendelta_EUROPE, "Greendelta") -> p2_EU
benfordPlot(benford_needs_EUROPE, "Needs") -> p3_EU
benfordPlot(benford_ecoinvent_EUROPE, "Ecoinvent") -> p4_EU

# Combine plots into a grid layout with a title
gridExtra::grid.arrange(
  p1_EU, p2_EU, p3_EU, p4_EU, 
  ncol = 2, 
  top = "Europe data comparison"
) -> allPlots_EU

# Save the Europe comparison plot
ggsave(allPlots_EU, file = "../results/EuropeComparisonPlot.pdf", width = 20, height = 20, units = "cm")
```

## Asia Data Comparison

```{r}
# Generate Benford plots for Asia datasets
benfordPlot(benford_worldsteel_ASIA, "Worldsteel") -> p1_ASIA
benfordPlot(benford_ecoinvent_ASIA, "Ecoinvent") -> p2_ASIA

# Combine plots into a grid layout with a title
gridExtra::grid.arrange(
  p1_ASIA, p2_ASIA, 
  ncol = 2, 
  top = "Asia data comparison"
) -> allPlots_ASIA 

# Save the Asia comparison plot
ggsave(allPlots_ASIA, file = "../results/AsiaComparisonPlot.pdf", width = 20, height = 10, units = "cm")
```

## Australia Data Comparison

```{r}
# Generate Benford plots for Australia datasets
benfordPlot(benford_OzLCI2019_AUSTRALIA, "OzLCI2019") -> p1_AU
benfordPlot(benford_ecoinvent_AUSTRALIA, "Ecoinvent") -> p2_AU

# Combine plots into a grid layout with a title
gridExtra::grid.arrange(
  p1_AU, p2_AU, 
  ncol = 2, 
  top = "Australia data comparison"
) -> allPlots_AU

# Save the Australia comparison plot
ggsave(allPlots_AU, file = "../results/AustraliaComparisonPlot.pdf", width = 20, height = 10, units = "cm")
```

## Continent Comparison: Ecoinvent Dataset

```{r}
# Generate Benford plots for each continent in the Ecoinvent dataset
benfordPlot(benford_ecoinvent_EUROPE, "Europe") -> EUROPE
benfordPlot(benford_ecoinvent_ASIA, "Asia") -> ASIA
benfordPlot(benford_ecoinvent_N_AMERICA, "North America") -> NAMERICA
benfordPlot(benford_ecoinvent_S_AMERICA, "South America") -> SAMERICA
benfordPlot(benford_ecoinvent_AFRICA, "Africa") -> AFRICA
benfordPlot(benford_ecoinvent_AUSTRALIA_OCEANIA, "Australia/Oceania") -> AUSTRALIA

# Combine plots into a grid layout with a title
gridExtra::grid.arrange(
  EUROPE, ASIA, NAMERICA, SAMERICA, AFRICA, AUSTRALIA, 
  ncol = 2, 
  top = "Continent comparison Ecoinvent"
) -> allPlots_continent

# Save the continent comparison plot
ggsave(allPlots_continent, file = "../results/ContinentComparisonPlot.pdf", width = 20, height = 28, units = "cm")
```

# Statistical Analysis and Dataframes for Benford's Law Results

## Function to Add Statistics to a Dataframe

```{r}
# Function to add statistical results from Benford analysis to a dataframe
addToStatsDF <- function(StatsDF, benfordVec, Continent, Database) {
  # Extract statistical measures from the Benford object
  chisq_x_squared <- benfordVec$stats$chisq$statistic
  chisq_p_value <- benfordVec$stats$chisq$p.value
  mantissa_arc_test_statistic <- benfordVec$stats$mantissa.arc.test$statistic
  mantissa_arc_test_p_value <- benfordVec$stats$mantissa.arc.test$p.value
  MAD_conformity <- benfordVec$MAD.conformity
  MAD <- benfordVec$MAD
  n <- benfordVec$info$n
  
  # Create a new row with the extracted data
  newRow <- data.frame(
    Continent = Continent,
    Database = Database,
    ChiSq = chisq_x_squared, 
    ChiSqP = chisq_p_value, 
    MantissaArcTest = mantissa_arc_test_statistic, 
    MantissaArcTestP = mantissa_arc_test_p_value, 
    MADConformity = MAD_conformity, 
    MAD = MAD, 
    NumberOfObservations = n
  )
  
  # Append the new row to the existing dataframe
  updatedDF <- rbind(StatsDF, newRow)
  rownames(updatedDF) <- NULL  # Reset row names
  return(updatedDF)  # Return updated dataframe
}
```

## Creating Dataframes for Continental Statistics - Ecoinvent

```{r}
# Initialize an empty dataframe for continents
continentsStatsDF <- data.frame()

# Add statistics for each continent from the Ecoinvent dataset
addToStatsDF(continentsStatsDF, benford_ecoinvent_EUROPE, "Europe", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_ASIA, "Asia", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_N_AMERICA, "North America", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_S_AMERICA, "South America", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_AFRICA, "Africa", "Ecoinvent") -> continentsStatsDF
addToStatsDF(continentsStatsDF, benford_ecoinvent_AUSTRALIA_OCEANIA, "Australia/Oceania", "Ecoinvent") -> continentsStatsDF
```

## Creating Dataframes for Europe, Asia, and Australia - All Datasets

### Europe Dataframe

```{r}
# Initialize an empty dataframe for Europe
EuropeAllDBStatsDF <- data.frame()

# Add statistics for Europe datasets
addToStatsDF(EuropeAllDBStatsDF, benford_worldsteel_EUROPE, "Europe", "Worldsteel") -> EuropeAllDBStatsDF
addToStatsDF(EuropeAllDBStatsDF, benford_greendelta_EUROPE, "Europe", "Greendelta") -> EuropeAllDBStatsDF
addToStatsDF(EuropeAllDBStatsDF, benford_needs_EUROPE, "Europe", "Needs") -> EuropeAllDBStatsDF
addToStatsDF(EuropeAllDBStatsDF, benford_ecoinvent_EUROPE, "Europe", "Ecoinvent") -> EuropeAllDBStatsDF
```

### Asia Dataframe

```{r}
# Initialize an empty dataframe for Asia
AsiaAllDBStatsDF <- data.frame()

# Add statistics for Asia datasets
addToStatsDF(AsiaAllDBStatsDF, benford_worldsteel_ASIA, "Asia", "Worldsteel") -> AsiaAllDBStatsDF
addToStatsDF(AsiaAllDBStatsDF, benford_ecoinvent_ASIA, "Asia", "Ecoinvent") -> AsiaAllDBStatsDF
```

### Australia Dataframe

```{r}
# Initialize an empty dataframe for Australia
AustraliaAllDBStatsDF <- data.frame()

# Add statistics for Australia datasets
addToStatsDF(AustraliaAllDBStatsDF, benford_OzLCI2019_AUSTRALIA, "Australia", "OzLCI2019") -> AustraliaAllDBStatsDF
addToStatsDF(AustraliaAllDBStatsDF, benford_ecoinvent_AUSTRALIA, "Australia", "Ecoinvent") -> AustraliaAllDBStatsDF
```

### Combining Dataframes for Comparison

```{r}
# Combine statistics for Europe, Asia, and Australia into a single dataframe
ComparisonBetweenDBStatsDF <- data.frame()
rbind(EuropeAllDBStatsDF, AsiaAllDBStatsDF, AustraliaAllDBStatsDF) -> ComparisonBetweenDBStatsDF
```

### Creating Dataframe for All Data Combined (Not Per Continent)

```{r}
# Initialize an empty dataframe for all datasets
allDfAllDataStatsDF <- data.frame()

# Add statistics for all datasets combined
addToStatsDF(allDfAllDataStatsDF, benford_worldsteel_all, "All", "Worldsteel") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_OzLCI2019_all, "All", "OzLCI2019") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_elcd_3_2_greendelta_v2_18_correction_20220908_all, "All", "Greendelta") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_needs_18_all, "All", "Needs") -> allDfAllDataStatsDF
addToStatsDF(allDfAllDataStatsDF, benford_bioenergiedat_18_all, "All", "Bioenergiedat") -> allDfAllDataStatsDF
```

### Saving Dataframes to CSV

```{r}
# Save the resulting dataframes as CSV files
write.csv(continentsStatsDF, "../data/continentsStatsDF.csv")
write.csv(ComparisonBetweenDBStatsDF, "../data/ComparisonBetweenDBStatsDF.csv")
write.csv(allDfAllDataStatsDF, "../data/allDfAllDataStatsDF.csv")
```

# Benford Analysis on Each Numeric Column - Ecoinvent

```{r}
# Function to calculate Benford statistics for each numeric column and add them to a dataframe
benford_stats <- function(data, ecoinventStatsDF) {
  # Select numeric columns and filter out columns with all zeros
  numeric_columns <- select_if(data, is.numeric)
  
  # Check if any numeric columns remain
  if (ncol(numeric_columns) == 0) { 
    return("No numeric columns with positive values found")
  }
  
  # Iterate through each numeric column
  for (col in 1:ncol(numeric_columns)) {
    # Perform Benford analysis
    benfordVec <- benford(numeric_columns[col] |> pull() |> as.numeric(), number.of.digits = 1, sign = "both")
    # Add results to the statistics dataframe
    addToStatsDF(ecoinventStatsDF, benfordVec, "Ecoinvent", colnames(numeric_columns[col])) -> ecoinventStatsDF
  }
  
  return(ecoinventStatsDF)
}

# Initialize an empty dataframe to store statistics
ecoinventStatsDF <- data.frame()

# Perform Benford analysis on the Ecoinvent dataset
bigDataCountriesGrouped |> benford_stats(ecoinventStatsDF) -> ecoinventStatsDF

# Update column names for clarity
colnames(ecoinventStatsDF)[c(1,2)] <- c("Database", "Column")
```

```{r}
# Save the statistics dataframe to a CSV file
write.csv(ecoinventStatsDF, "../data/ecoinventStatsDF.csv")
```

# Generating Tables for Paper Submission

## Table 1: Summary of All Datasets

```{r}
# Load the dataset, clean, and format data for Table 1
read.csv("../data/allDfAllDataStatsDF.csv") |> 
  select(-X, -Continent) |>  # Remove unnecessary columns
  mutate_if(is.numeric, round, 3) -> table1.data  # Round numeric values to 3 decimal places

# Update column names for better readability
colnames(table1.data)[8] <- "N"          # Rename the column for Number of Observations
colnames(table1.data)[4] <- "MantTest"   # Rename Mantissa Arc Test Statistic
colnames(table1.data)[5] <- "MantP"      # Rename Mantissa Arc Test P-value
colnames(table1.data)[6] <- "MADConf"    # Rename MAD Conformity

# Save the cleaned data as a CSV file for use in the paper
table1.data |> write.csv("../data/table1.data.csv")
```

## Table 2: Ecoinvent Conformity Data

```{r}
# Filter and clean Ecoinvent data for conformity analysis
ecoinventStatsDF |> 
  select(Column, MADConformity, NumberOfObservations) |>  # Select relevant columns
  dplyr::filter(NumberOfObservations > 100) -> conformity.data.ecoinvent  # Filter columns with sufficient observations
```

# Data Preparation and EPI Score Calculation

## Loading and Preparing Data

```{r}
# Load Benford conformity data for continents
read.csv("../data/continentsStatsDF.csv") -> continentsStatsDF

# Load EPI scores data from Excel
EPI_data <- read_excel("../data/2022-epi.xlsx", 
                       sheet = "3_EPI_Results")

# Preview EPI data
EPI_data |> head()

```

## Mapping ISO Codes to Continents

```{r}
# Function to map 3-letter ISO country codes to continents
get_continent3letters <- function(country_codes) {
  continent <- countrycode(country_codes, origin = 'iso3c', destination = 'continent')
  return(continent)
}

# Add continent information to the EPI dataset
get_continent3letters(EPI_data$iso) -> EPI_data$continent

# Select relevant columns for analysis
EPI_data |> 
  select(country, iso, region, EPI.new, AIR.new, H2O.new, WRS.new, WMG.new, HMT.new, AGR.new, continent) -> EPI_data

# Function to map ISO2 country codes to country names
get_country_name <- function(iso2_codes) {
  country_names <- countrycode(iso2_codes, origin = 'iso2c', destination = 'country.name')
  return(country_names)
}
```

## Extracting Country Names By Continent

```{r}
# North America
bigDataCountriesGrouped |> 
  select(Country, Continent) |> 
  dplyr::filter(Continent == "North America") |> 
  unique() |> 
  dplyr::filter(str_length(Country) == 2) |> 
  pull(Country) |> 
  get_country_name() -> northAmericaCountries

# South America
bigDataCountriesGrouped |> 
  select(Country, Continent) |> 
  dplyr::filter(Continent == "South America") |> 
  unique() |> 
  dplyr::filter(str_length(Country) == 2) |> 
  pull(Country) |> 
  get_country_name() -> southAmericaCountries

# Europe
bigDataCountriesGrouped |> 
  select(Country, Continent) |> 
  dplyr::filter(Continent == "Europe") |> 
  unique() |> 
  dplyr::filter(str_length(Country) == 2) |> 
  pull(Country) |> 
  get_country_name() -> europeCountries

# Asia
bigDataCountriesGrouped |> 
  select(Country, Continent) |> 
  dplyr::filter(Continent == "Asia") |> 
  unique() |> 
  dplyr::filter(str_length(Country) == 2) |> 
  pull(Country) |> 
  get_country_name() -> asiaCountries

# Africa
bigDataCountriesGrouped |> 
  select(Country, Continent) |> 
  dplyr::filter(Continent == "Africa") |> 
  unique() |> 
  dplyr::filter(str_length(Country) == 2) |> 
  pull(Country) |> 
  get_country_name() -> africaCountries

# Australia/Oceania
bigDataCountriesGrouped |> 
  select(Country, Continent) |> 
  dplyr::filter(Continent == "Australia/Oceania") |> 
  unique() |> 
  dplyr::filter(str_length(Country) == 2) |> 
  pull(Country) |> 
  get_country_name() -> australiaCountries
```

## Updating the EPI Dataset with Continent Information

```{r}
# Assign continent information to EPI dataset
EPI_data[EPI_data$country %in% northAmericaCountries, ]$continent <- "North America"
EPI_data[EPI_data$country %in% southAmericaCountries, ]$continent <- "South America"
EPI_data[EPI_data$country %in% australiaCountries, ]$continent <- "Australia/Oceania"
```

## Calculating Mean EPI Scores by Continent

```{r}
# Calculate mean EPI scores for Europe
EPI_data |> 
  dplyr::filter(continent == "Europe") |> 
  pull(EPI.new) |> 
  mean() -> mean_EPI_europe

# Calculate mean EPI scores for Asia
EPI_data |> 
  dplyr::filter(continent == "Asia") |> 
  pull(EPI.new) |> 
  mean() -> mean_EPI_asia

# Calculate mean EPI scores for Africa
EPI_data |> 
  dplyr::filter(continent == "Africa") |> 
  pull(EPI.new) |> 
  mean() -> mean_EPI_africa

# Calculate mean EPI scores for South America
EPI_data |> 
  dplyr::filter(continent == "South America") |> 
  pull(EPI.new) |> 
  mean() -> mean_EPI_south_america

# Calculate mean EPI scores for North America
EPI_data |> 
  dplyr::filter(continent == "North America") |> 
  pull(EPI.new) |> 
  mean() -> mean_EPI_north_america

# Calculate mean EPI scores for Australia/Oceania
EPI_data |> 
  dplyr::filter(continent == "Australia/Oceania") |> 
  pull(EPI.new) |> 
  mean() -> mean_EPI_australia_oceania
```

## Calculating Means of All Columns by Continent

```{r}
# Calculate the means of key metrics grouped by continent
EPIDataMeans <- EPI_data |> 
  select(EPI.new, AIR.new, H2O.new, WRS.new, WMG.new, HMT.new, AGR.new, continent) |> 
  group_by(continent) |> 
  summarise(
    AIR = mean(AIR.new, na.rm = TRUE), 
    H2O = mean(H2O.new, na.rm = TRUE), 
    WRS = mean(as.numeric(WRS.new), na.rm = TRUE), 
    WMG = mean(WMG.new, na.rm = TRUE), 
    HMT = mean(HMT.new, na.rm = TRUE), 
    AGR = mean(AGR.new, na.rm = TRUE)
  )
```

# Calculating Benford Points for Each Continent

## Ecoinvent Data

```{r}
# Assign point values based on Benford conformity levels
europe_df <- europe_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

europe_df$points |> sum() -> europeBenfordPoints

asia_df <- asia_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

asia_df$points |> sum() -> asiaBenfordPoints

africa_df <- africa_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

africa_df$points |> sum() -> africaBenfordPoints

north_america_df <- north_america_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

north_america_df$points |> sum() -> northAmericafBenfordPoints

south_america_df <- south_america_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

south_america_df$points |> sum() -> southAmericafBenfordPoints
```

## Heavy Metals Data

```{r}
# Assign point values for heavy metals based on Benford conformity levels
heavyMetals_df <- heavyMetals_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  ))

# Filter and calculate points for each continent
heavy_metals_europe <- heavyMetals_df |> dplyr::filter(Continent == "Europe")
heavy_metals_asia <- heavyMetals_df |> dplyr::filter(Continent == "Asia")
heavy_metals_north_america <- heavyMetals_df |> dplyr::filter(Continent == "North America")
heavy_metals_south_america <- heavyMetals_df |> dplyr::filter(Continent == "South America")
heavy_metals_africa <- heavyMetals_df |> dplyr::filter(Continent == "Africa")

heavy_metals_europe$points |> sum() -> europeHeavyMetalsBenfordPoints
heavy_metals_asia$points |> sum() -> asiaHeavyMetalsBenfordPoints
heavy_metals_north_america$points |> sum() -> northAmericaHeavyMetalsBenfordPoints
heavy_metals_south_america$points |> sum() -> southAmericaHeavyMetalsBenfordPoints
heavy_metals_africa$points |> sum() -> africaHeavyMetalsBenfordPoints
```

## Aggregating Benford Points and EPI Data

```{r}
# Get MAD value for each continent
continentsStatsDF |> select(Continent, MAD) -> continentsMAD
# Add Benford points and heavy metals points to continents MAD dataframe
continentsMAD$BenfordPoints <- c(europeBenfordPoints, asiaBenfordPoints, northAmericafBenfordPoints, southAmericafBenfordPoints, africaBenfordPoints, 0)
continentsMAD$HeavyMetalsBenfordPoints <- c(europeHeavyMetalsBenfordPoints, asiaHeavyMetalsBenfordPoints, northAmericaHeavyMetalsBenfordPoints, southAmericaHeavyMetalsBenfordPoints, africaHeavyMetalsBenfordPoints, 0)

# Merge with EPI data means
continentsMAD |> inner_join(EPIDataMeans, by = c("Continent" = "continent")) -> continentsMAD
```

## Correlation Analysis and Visualization

```{r}
# Calculate and visualize correlations between Benford points, MAD, and EPI metrics
continentsMAD[continentsMAD$Continent != "Australia/Oceania", -1] |> 
  cor() |> 
  ggcorrplot::ggcorrplot(type = "upper", lab = TRUE)
```

## Generating CSV Files for Conformity Analysis

```{r}
# Save continent-specific Benford conformity breakdowns to CSV
asia_df |> 
  group_by(Conformity) |> 
  reframe(Count = n(), Percentage = n()/nrow(asia_df) * 100) |> 
  write.csv("../data/asiaBenford.csv")

europe_df |> 
  group_by(Conformity) |> 
  reframe(Count = n(), Percentage = n()/nrow(europe_df) * 100) |> 
  write.csv("../data/europeBenford.csv")

africa_df |> 
  group_by(Conformity) |> 
  reframe(Count = n(), Percentage = n()/nrow(africa_df) * 100) |> 
  write.csv("../data/africaBenford.csv")

south_america_df |> 
  group_by(Conformity) |> 
  reframe(Count = n(), Percentage = n()/nrow(south_america_df) * 100) |> 
  write.csv("../data/southAmericaBenford.csv")

north_america_df |> 
  group_by(Conformity) |> 
  reframe(Count = n(), Percentage = n()/nrow(north_america_df) * 100) |> 
  write.csv("../data/northAmericaBenford.csv")
```

## Load and Transform Carbon Atlas Data

```{r}
# Load the Carbon Atlas dataset
carbonAtlas <- read_delim("../data/carbonAtlas.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)

# Reshape the Carbon Atlas data to a long format
pivot_longer(carbonAtlas, cols = 1:ncol(carbonAtlas), names_to = "Country", values_to = "Carbon") -> carbonAtlas

# Add continent information based on full country names
get_continent_full_country_name <- function(country_names) {
  continent <- countrycode(country_names, origin = 'country.name', destination = 'continent')
  return(continent)
}

carbonAtlas$Country |> get_continent_full_country_name() -> carbonAtlas$Continent
```

## Filter Carbon Atlas by Continents and Countries

```{r}
# Reapply loading and reshaping (for redundancy in the original code)
carbonAtlas <- read_delim("../data/carbonAtlas.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)

pivot_longer(carbonAtlas, cols = 1:ncol(carbonAtlas), names_to = "Country", values_to = "Carbon") -> carbonAtlas

# Function to add continent information based on country names
get_continent_full_country_name <- function(country_names) {
  continent <- countrycode(country_names, origin = 'country.name', destination = 'continent')
  return(continent)
}

# Assign continents to Carbon Atlas data
carbonAtlas$Country |> get_continent_full_country_name() -> carbonAtlas$Continent

# Adjust continent names for specific country groups
carbonAtlas[carbonAtlas$Country %in% southAmericaCountries,]$Continent <- "South America"
carbonAtlas[carbonAtlas$Country %in% northAmericaCountries,]$Continent <- "North America"

# Filter Carbon Atlas data for relevant continents and countries
carbonAtlas[carbonAtlas$Country %in% c(europeCountries, southAmericaCountries, northAmericaCountries, africaCountries, asiaCountries),] -> carbonAtlas
```

## Convert Conformity Levels to Points

```{r}
# Convert conformity levels to points for water data
continentsWaterDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsWaterDataPlotDF

# Convert conformity levels to points for air data
continentsAirDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsAirDataPlotDF

# Convert conformity levels to points for soil data
continentsSoilDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsSoilDataPlotDF

# Convert conformity levels to points for natural resources data
continentsNaturalResourcesDataPlotDF |> mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) -> continentsNaturalResourcesDataPlotDF
```

## Calculate Points for Each Continent

```{r}
# Calculate total points for water data by continent
continentsWaterDataPlotDF |> group_by(Continent) |> summarise(pointsWater = sum(points)) -> continentsWaterBenfordPoints

# Calculate total points for air data by continent
continentsAirDataPlotDF |> group_by(Continent) |> summarise(pointsAir = sum(points)) -> continentsAirBenfordPoints

# Calculate total points for soil data by continent
continentsSoilDataPlotDF |> group_by(Continent) |> summarise(pointsSoil = sum(points)) -> continentsSoilBenfordPoints

# Calculate total points for natural resources data by continent
continentsNaturalResourcesDataPlotDF |> group_by(Continent) |> summarise(pointsNaturalRes = sum(points)) -> continentsNaturalResourcesBenfordPoints

# Merge all points into a single data frame
continentsMAD |> 
  left_join(continentsWaterBenfordPoints, by = "Continent") |> 
  left_join(continentsAirBenfordPoints, by = "Continent") |> 
  left_join(continentsSoilBenfordPoints, by = "Continent") |> 
  left_join(continentsNaturalResourcesBenfordPoints, by = "Continent") -> continentsMAD
```

## Correlation Analysis and Visualization

```{r}
# Generate correlation plot for continents excluding Australia/Oceania
correlationPlot <- continentsMAD[continentsMAD$Continent != "Australia/Oceania", -1] |>
  cor() |>
  ggcorrplot::ggcorrplot(type = "upper", lab = TRUE, 
             colors = c("#d01c8b", "white", "#4478c5"),
             outline.color = "black")

# Display the correlation plot
correlationPlot

# Save the correlation plot as a PDF
correlationPlot |> ggsave(filename = "../results/correlationPlot.pdf", width = 10, height = 10)
```

## Carbon Emissions vs. Conformity Points

```{r}
# Convert carbon conformity levels to points and calculate total points for each continent
carbon_df |> 
  mutate(points = case_when(
    Conformity == "Nonconformity" ~ 0,
    Conformity == "Marginally acceptable conformity" ~ 1,
    Conformity == "Acceptable conformity" ~ 2,
    Conformity == "Close conformity" ~ 3
  )) |> 
  group_by(Continent) |> 
  summarise(pointsCarbon = sum(points)) -> continentsCarbonBenfordPoints

# Merge carbon emissions with conformity points and calculate correlation
carbonAtlas |> 
  group_by(Continent) |> 
  summarise(CarbonAtlasEmission = sum(Carbon, na.rm = TRUE)) |> 
  inner_join(continentsCarbonBenfordPoints, by = "Continent") |> 
  select(-1) |> 
  cor() |> 
  ggcorrplot::ggcorrplot(type = "upper", lab = TRUE, 
             colors = c("#d01c8b", "white", "#4478c5"),
             outline.color = "black")
```
